from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime
from database.db import SessionLocal
from database.models import GeneratedSeries

router = Router()

class AutoGenStates(StatesGroup):
    prompt = State()
    repeat = State()
    gen_time = State()
    post_limit = State()
    moderation = State()
    confirm = State()

@router.message(F.text == "ü§ñ –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤")
async def start_auto_gen(message: Message, state: FSMContext):
    await message.answer("üìÑ –í–≤–µ–¥–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
    await state.set_state(AutoGenStates.prompt)

@router.message(AutoGenStates.prompt)
async def set_prompt(message: Message, state: FSMContext):
    await state.update_data(prompt=message.text)
    await message.answer("üîÅ –ü–æ–≤—Ç–æ—Ä—è—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å?\n–î–∞ / –ù–µ—Ç")
    await state.set_state(AutoGenStates.repeat)

@router.message(AutoGenStates.repeat)
async def set_repeat(message: Message, state: FSMContext):
    repeat = message.text.lower() == "–¥–∞"
    await state.update_data(repeat=repeat)
    await message.answer("üïí –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12:00)")
    await state.set_state(AutoGenStates.gen_time)

@router.message(AutoGenStates.gen_time)
async def set_time(message: Message, state: FSMContext):
    try:
        gen_time = datetime.strptime(message.text, "%H:%M").time()
        await state.update_data(gen_time=gen_time.strftime("%H:%M"))
        await message.answer("üî¢ –°–∫–æ–ª—å–∫–æ –ø–æ—Å—Ç–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–∞–∫—Å–∏–º—É–º? (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)")
        await state.set_state(AutoGenStates.post_limit)
    except ValueError:
        await message.answer("‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12:00).")

@router.message(AutoGenStates.post_limit)
async def set_limit(message: Message, state: FSMContext):
    try:
        limit = int(message.text)
        await state.update_data(post_limit=limit)
    except ValueError:
        await state.update_data(post_limit=10)
    await message.answer("üëÅ –í–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–º–æ–¥–µ—Ä–∞—Ü–∏—é? –î–∞ / –ù–µ—Ç")
    await state.set_state(AutoGenStates.moderation)

@router.message(AutoGenStates.moderation)
async def set_moderation(message: Message, state: FSMContext):
    mod = message.text.lower() == "–¥–∞"
    await state.update_data(moderation=mod)

    data = await state.get_data()
    summary = (
        f"üìÑ –®–∞–±–ª–æ–Ω: {data['prompt']}\n"
        f"üîÅ –ü–æ–≤—Ç–æ—Ä: {'–î–∞' if data['repeat'] else '–ù–µ—Ç'}\n"
        f"üïí –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {data['gen_time']}\n"
        f"üî¢ –õ–∏–º–∏—Ç: {data['post_limit']}\n"
        f"üëÅ –ü—Ä–µ–º–æ–¥–µ—Ä–∞—Ü–∏—è: {'–î–∞' if data['moderation'] else '–ù–µ—Ç'}"
    )
    await message.answer(
        f"‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n\n{summary}\n\n–ó–∞–ø—É—Å–∫–∞–µ–º?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="start_gen")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_gen")]
        ])
    )
    await state.set_state(AutoGenStates.confirm)

@router.callback_query(F.data == "start_gen")
async def confirm_gen(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    async with SessionLocal() as session:
        series = GeneratedSeries(
            chat_id=call.message.chat.id,
            prompt=data['prompt'],
            repeat=data['repeat'],
            time=data['gen_time'],
            post_limit=data['post_limit'],
            posts_generated=0,
            moderation=data['moderation']
        )
        session.add(series)
        await session.commit()
    await call.message.edit_text("üöÄ –°–µ—Ä–∏—è –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∞ –∏ –∑–∞–ø—É—â–µ–Ω–∞!")
    await state.clear()

@router.callback_query(F.data == "cancel_gen")
async def cancel_gen(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text("‚ùå –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()