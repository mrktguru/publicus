from aiogram import Router, F
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    ReplyKeyboardRemove,
    InputMediaPhoto,
)
from aiogram.fsm.context import FSMContext
from datetime import datetime
from zoneinfo import ZoneInfo
import logging

from database.db import AsyncSessionLocal
from database.models import Post, Group
from states.post_states import ManualPostStates
from keyboards.main import main_menu_kb

router = Router()
logger = logging.getLogger(__name__)

# ‚îÄ‚îÄ –∑–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.message(F.text.startswith("‚úèÔ∏è –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç"))
async def start_manual(message: Message, state: FSMContext):
    logger.info("Handler start_manual triggered with message: %s", message.text)
    data = await state.get_data()
    logger.info(f"Starting manual post with state data: {data}")
    
    if not data.get("group_id"):
        logger.warning(f"No group_id in state data: {data}")
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ /start")
        return
        
    # –ü—Ä–æ–≤–µ—Ä–∏–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –≥—Ä—É–ø–ø–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    try:
        async with AsyncSessionLocal() as session:
            group = await session.get(Group, data["group_id"])
            if not group:
                logger.warning(f"Group with ID {data['group_id']} not found")
                await message.answer("‚ùå –í—ã–±—Ä–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ /start")
                return
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.update_data(group_title=group.title)
            logger.info(f"Group found: {group.id} - {group.title}")
    except Exception as e:
        logger.error(f"Error checking group existence: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥—Ä—É–ø–ø—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ /start")
        return
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
    await state.update_data(text=None, media_file_id=None)
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ"
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="cancel_creation")],
        ]
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞ –∏ —Å–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await state.set_state(ManualPostStates.waiting_for_content)
    await message.answer(
        "üí¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å —Ç–µ–∫—Å—Ç–æ–º (–ø–æ–¥–ø–∏—Å—å—é).\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç, –∞ –∑–∞—Ç–µ–º —Ñ–æ—Ç–æ (—è –æ–±—ä–µ–¥–∏–Ω—é –∏—Ö)",
        reply_markup=kb  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É
    )

# ‚îÄ‚îÄ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.message(ManualPostStates.waiting_for_content, F.text)
async def handle_text(message: Message, state: FSMContext):
    logger.info("Handling text in waiting_for_content state")
    data = await state.get_data()
    text = message.text
    media_file_id = data.get("media_file_id")
    
    # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç, –Ω–æ –Ω–µ—Ç —Ñ–æ—Ç–æ - –ø—Ä–µ–¥–ª–æ–∂–∏–º –∑–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
    if data.get("text") and not media_file_id:
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üì∏ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="add_photo")],
                [InlineKeyboardButton(text="‚è±Ô∏è –î–∞–ª–µ–µ (–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)", callback_data="proceed_to_planning")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_creation")],
            ]
        )
        await state.update_data(text=text)
        await message.answer(
            f"‚úÖ –¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω:\n\n{text[:200]}{'...' if len(text) > 200 else ''}\n\n"
            "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –ø—É–±–ª–∏–∫–∞—Ü–∏–∏?",
            reply_markup=kb
        )
    
    # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –Ω–æ –ø—Ä–∏—à–µ–ª –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
    elif media_file_id:
        await state.update_data(text=text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        try:
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å—Ä–∞–∑—É", callback_data="manual_publish_now")],
                    [InlineKeyboardButton(text="‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é", callback_data="manual_schedule")],
                    [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_text")],
                    [InlineKeyboardButton(text="üñºÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="edit_photo")],
                    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_creation")],
                ]
            )
            
            # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            await message.answer("üìù –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞:")
            
            # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∏—Å—Ç–æ–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
            await message.answer_photo(
                photo=media_file_id,
                caption=text
            )
            
            # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —ç—Ç–∏–º –ø–æ—Å—Ç–æ–º:",
                reply_markup=kb
            )
            
            await state.set_state(ManualPostStates.waiting_for_choice)
        except Exception as e:
            logger.error(f"Error showing post preview: {e}")
            await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    
    # –ï—Å–ª–∏ –Ω–∏ —Ç–µ–∫—Å—Ç–∞, –Ω–∏ —Ñ–æ—Ç–æ –µ—â–µ –Ω–µ—Ç - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
    else:
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üì∏ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="add_photo")],
                [InlineKeyboardButton(text="‚è±Ô∏è –î–∞–ª–µ–µ (–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)", callback_data="proceed_to_planning")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_creation")],
            ]
        )
        await state.update_data(text=text)
        await message.answer(
            f"‚úÖ –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω:\n\n{text[:200]}{'...' if len(text) > 200 else ''}\n\n"
            "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –ø—É–±–ª–∏–∫–∞—Ü–∏–∏?",
            reply_markup=kb
        )

# ‚îÄ‚îÄ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.message(ManualPostStates.waiting_for_content, F.photo)
async def handle_photo(message: Message, state: FSMContext):
    logger.info("Handling photo in waiting_for_content state")
    data = await state.get_data()
    file_id = message.photo[-1].file_id
    caption = message.caption or ""
    
    # –ï—Å–ª–∏ —É–∂–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –≤–º–µ—Å—Ç–µ —Å —Ñ–æ—Ç–æ
    saved_text = data.get("text", "")
    if saved_text and not caption:
        text_to_save = saved_text
    else:
        text_to_save = caption
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    await state.update_data(text=text_to_save, media_file_id=file_id)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ—Å—Ç–æ–º
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å—Ä–∞–∑—É", callback_data="manual_publish_now")],
            [InlineKeyboardButton(text="‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é", callback_data="manual_schedule")],
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_text")],
            [InlineKeyboardButton(text="üñºÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="edit_photo")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_creation")],
        ]
    )
    
    # 1. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ
    await message.answer("‚úÖ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ!")
    
    # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    await message.answer("üìù –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞:")
    
    # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∏—Å—Ç–æ–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é (–±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞–¥–ø–∏—Å–µ–π)
    await message.answer_photo(
        photo=file_id,
        caption=text_to_save
    )
    
    # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —ç—Ç–∏–º –ø–æ—Å—Ç–æ–º:",
        reply_markup=kb
    )
    
    await state.set_state(ManualPostStates.waiting_for_choice)

# ‚îÄ‚îÄ –æ–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫ –≤–æ –≤—Ä–µ–º—è –≤–≤–æ–¥–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.callback_query(F.data == "add_photo")
async def request_photo(call: CallbackQuery, state: FSMContext):
    logger.info("User requested to add photo")
    await call.message.edit_text(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç, –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ."
    )
    await state.set_state(ManualPostStates.waiting_for_content)
    await call.answer()

@router.callback_query(F.data == "proceed_to_planning")
async def show_publishing_options(call: CallbackQuery, state: FSMContext):
    logger.info("User requested to proceed to planning")
    data = await state.get_data()
    text = data.get("text", "")
    
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å—Ä–∞–∑—É", callback_data="manual_publish_now")],
            [InlineKeyboardButton(text="‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é", callback_data="manual_schedule")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_creation")],
        ]
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    await call.message.edit_text("üìù –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞:")
    
    # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
    await call.message.answer(text)
    
    # –ò –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    await call.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —ç—Ç–∏–º –ø–æ—Å—Ç–æ–º:",
        reply_markup=kb
    )
    
    await state.set_state(ManualPostStates.waiting_for_choice)
    await call.answer()

@router.callback_query(F.data == "edit_text")
async def edit_text_request(call: CallbackQuery, state: FSMContext):
    logger.info("User requested to edit text")
    await call.message.edit_text(
        "‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞:"
    )
    await state.set_state(ManualPostStates.waiting_for_content)
    await call.answer()

@router.callback_query(F.data == "edit_photo")
async def edit_photo_request(call: CallbackQuery, state: FSMContext):
    logger.info("User requested to edit photo")
    await call.message.edit_text(
        "üñºÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –ø–æ—Å—Ç–∞.\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç, –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ."
    )
    # –°–æ—Ö—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, —É–¥–∞–ª–∏–º —Å—Ç–∞—Ä–æ–µ —Ñ–æ—Ç–æ
    data = await state.get_data()
    await state.update_data(text=data.get("text"), media_file_id=None)
    await state.set_state(ManualPostStates.waiting_for_content)
    await call.answer()

@router.callback_query(F.data == "cancel_creation")
async def cancel_creation(call: CallbackQuery, state: FSMContext):
    logger.info("User cancelled post creation")
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–ø–ø–µ
    data = await state.get_data()
    group_id = data.get("group_id")
    group_title = data.get("group_title")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
    await state.clear()
    await state.set_data({"group_id": group_id, "group_title": group_title})
    
    await call.message.edit_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_kb())
    await call.answer()

# ‚îÄ‚îÄ –ø—É–±–ª–∏–∫–∞—Ü–∏—è ¬´—Å–µ–π—á–∞—Å¬ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.callback_query(F.data == "manual_publish_now")
async def publish_now(call: CallbackQuery, state: FSMContext):
    logger.info("Publishing post now")
    data = await state.get_data()
    logger.info(f"Publishing post now with data: {data}")
    
    text = data.get("text", "")
    media_file_id = data.get("media_file_id")
    group_pk = data.get("group_id")

    if not group_pk:
        await call.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ /start")
        await state.clear()
        return

    # 1) –ü–æ–ª—É—á–∞–µ–º chat_id
    async with AsyncSessionLocal() as session:
        group = await session.get(Group, group_pk)
        if not group:
            await call.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            await state.clear()
            return
        chat_id = group.chat_id

    # 2) –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    if not text and not media_file_id:
        await call.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –º–µ–¥–∏–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
        await state.clear()
        return

    # 3) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç
    try:
        if media_file_id:
            await call.bot.send_photo(chat_id=chat_id, photo=media_file_id, caption=text)
        else:
            await call.bot.send_message(chat_id=chat_id, text=text)
    except Exception as e:
        logger.error(f"Error sending message to chat: {e}")
        await call.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await state.clear()
        return

    # 4) –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
    now_msk = datetime.now(ZoneInfo("Europe/Moscow"))
    async with AsyncSessionLocal() as session:
        try:
            post = Post(
                chat_id=chat_id,
                text=text,
                media_file_id=media_file_id,
                publish_at=now_msk,
                created_by=call.from_user.id,
                status="sent",
                published=True
            )
            session.add(post)
            await session.commit()
        except Exception as e:
            logger.error(f"Error saving post to database: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ

    # 5) –£—Å–ø–µ—Ö –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await call.message.edit_text("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º group_id –∏ group_title –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    await state.set_data({"group_id": group_pk, "group_title": group.title})
    
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_kb())
    await call.answer()

# ‚îÄ‚îÄ –∑–∞–ø—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.callback_query(F.data == "manual_schedule")
async def schedule_choice(call: CallbackQuery, state: FSMContext):
    logger.info("User requested post scheduling")
    # –°–æ—Ö—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
    data = await state.get_data()
    
    await call.message.edit_text(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.MM.–ì–ì–ì–ì –ß–ß:–ú–ú"
    )
    await state.set_state(ManualPostStates.waiting_for_datetime)
    await call.answer()

# ‚îÄ‚îÄ –≤–≤–æ–¥ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.message(ManualPostStates.waiting_for_datetime)
async def input_datetime(message: Message, state: FSMContext):
    logger.info(f"Processing date input: {message.text}")
    try:
        dt = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        dt = dt.replace(tzinfo=ZoneInfo("Europe/Moscow"))
    except ValueError:
        return await message.answer("‚õîÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞: –î–î.MM.–ì–ì–ì–ì –ß–ß:–ú–ú")

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫ –¥–∞–Ω–Ω—ã–º
    data["publish_at"] = dt
    await state.update_data(data)
    
    text = data.get("text", "")
    media_file_id = data.get("media_file_id")

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="manual_confirm")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="manual_cancel")],
        ]
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    await message.answer("üìù –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞:")
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å—Ç —Å —Ñ–æ—Ç–æ
    if media_file_id:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∏—Å—Ç—ã–π –ø–æ—Å—Ç —Å —Ñ–æ—Ç–æ
        await message.answer_photo(
            photo=media_file_id,
            caption=text
        )
    else:
        # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        await message.answer(text)
    
    # –û—Ç–¥–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    await message.answer(
        f"üïí –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞: {dt:%d.%m.%Y %H:%M}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?",
        reply_markup=kb
    )
    
    await state.set_state(ManualPostStates.waiting_for_confirm)

# ‚îÄ‚îÄ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.callback_query(F.data == "manual_confirm")
async def confirm_manual(call: CallbackQuery, state: FSMContext):
    logger.info("Confirming scheduled post")
    data = await state.get_data()
    group_pk = data.get("group_id")
    media_file_id = data.get("media_file_id")
    text = data.get("text", "")

    if not group_pk:
        await call.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ /start")
        await state.clear()
        return

    async with AsyncSessionLocal() as session:
        group = await session.get(Group, group_pk)
        if not group:
            await call.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            await state.clear()
            return
            
        chat_id = group.chat_id
        post = Post(
            chat_id=chat_id,
            text=text,
            media_file_id=media_file_id,
            publish_at=data.get("publish_at"),
            created_by=call.from_user.id,
            status="approved",
        )
        session.add(post)
        await session.commit()

    await call.message.edit_text("‚úÖ –ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω!")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º group_id –∏ group_title –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    await state.set_data({"group_id": group_pk, "group_title": group.title})
    
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_kb())
    await call.answer()

# ‚îÄ‚îÄ –æ—Ç–º–µ–Ω–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.callback_query(F.data == "manual_cancel")
async def cancel_manual(call: CallbackQuery, state: FSMContext):
    logger.info("Cancelling post scheduling")
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    group_id = data.get("group_id")
    group_title = data.get("group_title")
    
    await call.message.edit_text("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º group_id –∏ group_title –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    await state.set_data({"group_id": group_id, "group_title": group_title})
    
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_kb())
    await call.answer()
