# handlers/channels.py
import logging
import re
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select, text  # –î–æ–±–∞–≤—å—Ç–µ –∏–º–ø–æ—Ä—Ç text


from database.db import AsyncSessionLocal
from database.models import User, Group
from utils.keyboards import create_channels_keyboard, create_main_keyboard

router = Router()
logger = logging.getLogger(__name__)

class ChannelStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏/–≥—Ä—É–ø–ø–∞–º–∏"""
    waiting_for_channel_message = State()
    waiting_for_channel_username = State()
    waiting_for_group_command = State()
    waiting_for_display_name = State()

@router.callback_query(lambda c: c.data == "add_channel")
async def add_channel_callback(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
    await call.message.edit_text(
        "üìå –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì£ –ö–∞–Ω–∞–ª", callback_data="add_channel_type")],
            [InlineKeyboardButton(text="üë• –ì—Ä—É–ø–ø—É", callback_data="add_group_type")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_channels")]
        ])
    )

@router.callback_query(lambda c: c.data == "back_to_channels")
async def back_to_channels(call: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∫–∞–Ω–∞–ª–æ–≤"""
    user_id = call.from_user.id
    try:
        keyboard = await create_channels_keyboard(user_id)
        await call.message.edit_text(
            "üìù <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–∞–±–æ—Ç—ã</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é.",
            parse_mode="HTML",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"Error in back_to_channels: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.callback_query(lambda c: c.data == "add_channel_type")
async def process_add_channel(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
    await state.update_data(adding_type="channel")
    await call.message.edit_text(
        "üì£ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞</b>\n\n"
        "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:\n\n"
        "1) –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ (@your_bot_username) –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –∫–∞–Ω–∞–ª\n"
        "2) –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –±–æ—Ç–∞ –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "3) –ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –≤ —ç—Ç–æ—Ç —á–∞—Ç\n"
        "<b>–ò–õ–ò</b>\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ @username –∫–∞–Ω–∞–ª–∞ (–µ—Å–ª–∏ –æ–Ω –ø—É–±–ª–∏—á–Ω—ã–π)",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_add_select")]
        ])
    )
    await state.set_state(ChannelStates.waiting_for_channel_message)

@router.callback_query(lambda c: c.data == "add_group_type")
async def process_add_group(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã"""
    await state.update_data(adding_type="group")
    await call.message.edit_text(
        "üë• <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã</b>\n\n"
        "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:\n\n"
        "1) –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ (@your_bot_username) –≤ –≥—Ä—É–ø–ø—É\n"
        "2) –ù–∞–∑–Ω–∞—á—å—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "3) –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /connect –≤ –≥—Ä—É–ø–ø–µ",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_add_select")]
        ])
    )
    await state.set_state(ChannelStates.waiting_for_group_command)

@router.callback_query(lambda c: c.data == "back_to_add_select")
async def back_to_add_select(call: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø–∞"""
    await call.message.edit_text(
        "üìå –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì£ –ö–∞–Ω–∞–ª", callback_data="add_channel_type")],
            [InlineKeyboardButton(text="üë• –ì—Ä—É–ø–ø—É", callback_data="add_group_type")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_channels")]
        ])
    )
    await state.clear()

@router.message(ChannelStates.waiting_for_channel_message)
async def process_channel_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞"""
    user_id = message.from_user.id
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª @username –∫–∞–Ω–∞–ª–∞
    if message.text and message.text.startswith('@'):
        channel_username = message.text.strip()
        await state.update_data(channel_username=channel_username)
        await message.answer(
            f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–∞–Ω–∞–ª {channel_username}...\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–æ—Ç–µ):"
        )
        await state.set_state(ChannelStates.waiting_for_display_name)
        return
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—Å–ª–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞
    if message.forward_from_chat and message.forward_from_chat.type == "channel":
        channel_id = message.forward_from_chat.id
        channel_title = message.forward_from_chat.title
        channel_username_value = message.forward_from_chat.username
        
        try:
            async with AsyncSessionLocal() as session:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª
                existing_group_q = select(Group).filter(Group.chat_id == channel_id)
                existing_group_result = await session.execute(existing_group_q)
                existing_group = existing_group_result.scalar_one_or_none()
                
                if existing_group:
                    # –ö–∞–Ω–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –æ–Ω —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    if existing_group.added_by == user_id:
                        await message.answer(
                            f"‚ö†Ô∏è –≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤–∞–º–∏ —Ä–∞–Ω–µ–µ: {existing_group.title}"
                        )
                    else:
                        await message.answer(
                            f"‚ö†Ô∏è –≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."
                        )
                    await state.clear()
                    return
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π SQL –∑–∞–ø—Ä–æ—Å –≤–º–µ—Å—Ç–æ ORM
                # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ö–û–î: –ò—Å–ø–æ–ª—å–∑—É–µ–º text() –¥–ª—è SQL –∑–∞–ø—Ä–æ—Å–∞
                sql = text("""
                INSERT INTO groups (chat_id, title, added_by, date_added) 
                VALUES (:chat_id, :title, :added_by, CURRENT_TIMESTAMP)
                """)
                await session.execute(sql, {
                    "chat_id": channel_id,
                    "title": channel_title,
                    "added_by": user_id
                })
                await session.commit()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_q = select(User).filter(User.user_id == user_id)
                user_result = await session.execute(user_q)
                user = user_result.scalar_one_or_none()
                
                if user:
                    user.current_chat_id = channel_id
                    await session.commit()
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
                await message.answer(
                    f"‚úÖ –ö–∞–Ω–∞–ª \"{channel_title}\" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                    f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞."
                )
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
                keyboard = await create_channels_keyboard(user_id)
                await message.answer(
                    "üìù <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–∞–±–æ—Ç—ã</b>",
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
                
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await state.clear()
                
        except Exception as e:
            logger.error(f"Error adding channel: {e}")
            await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await state.clear()
    else:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞
        await message.answer(
            "‚ö†Ô∏è –≠—Ç–æ –Ω–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ "
            "–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ @username –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞."
        )


@router.message(ChannelStates.waiting_for_display_name)
async def process_display_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–º–µ–Ω–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞"""
    user_id = message.from_user.id
    display_name = message.text.strip()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    channel_username = user_data.get("channel_username")
    
    if not display_name:
        await message.answer("‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        return
    
    try:
        async with AsyncSessionLocal() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ –∫–∞–Ω–∞–ª —Å —Ç–∞–∫–∏–º username
            username_without_at = channel_username.lstrip('@') if channel_username else None
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π SQL –∑–∞–ø—Ä–æ—Å –≤–º–µ—Å—Ç–æ ORM
           # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ö–û–î: –ò—Å–ø–æ–ª—å–∑—É–µ–º text() –¥–ª—è SQL –∑–∞–ø—Ä–æ—Å–∞
            sql = text("""
            INSERT INTO groups (chat_id, title, added_by, date_added) 
            VALUES (0, :title, :added_by, CURRENT_TIMESTAMP)
            """)
            result = await session.execute(sql, {
                "title": display_name,
                "added_by": user_id
            })
            await session.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
            group_id_query = text("""
            SELECT id FROM groups 
            WHERE chat_id = 0 AND title = :title AND added_by = :added_by
            ORDER BY id DESC LIMIT 1
            """)
            result = await session.execute(group_id_query, {
                "title": display_name,
                "added_by": user_id
            })
            group_id = result.scalar_one_or_none()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_q = select(User).filter(User.user_id == user_id)
            user_result = await session.execute(user_q)
            user = user_result.scalar_one_or_none()
            
            if user and group_id:
                user.current_chat_id = group_id
                await session.commit()
            
            await message.answer(
                f"‚úÖ –ö–∞–Ω–∞–ª {channel_username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ \"{display_name}\"!\n\n"
                f"‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä "
                f"—Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π.",
                parse_mode="HTML"
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
            keyboard = await create_channels_keyboard(user_id)
            await message.answer(
                "üìù <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–∞–±–æ—Ç—ã</b>",
                parse_mode="HTML",
                reply_markup=keyboard
            )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
            
    except Exception as e:
        logger.error(f"Error adding channel by username: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()



@router.message(Command('connect'))
async def connect_group(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /connect –≤ –≥—Ä—É–ø–ø–µ"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ
    if message.chat.type not in ['group', 'supergroup']:
        await message.answer(
            "‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.\n\n"
            "–ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –∫ –≥—Ä—É–ø–ø–µ, –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –≥—Ä—É–ø–ø—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–∞–º –∫–æ–º–∞–Ω–¥—É /connect"
        )
        return
    
    user_id = message.from_user.id
    chat_id = message.chat.id
    chat_title = message.chat.title
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ
    try:
        chat_member = await message.bot.get_chat_member(chat_id, message.bot.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å –Ω—É–∂–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏
        if not chat_member.status == "administrator":
            await message.answer(
                "‚ö†Ô∏è –î–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã.\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–Ω–∞—á—å—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É."
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –±–æ—Ç–∞ –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
        if not chat_member.can_post_messages:
            await message.answer(
                "‚ö†Ô∏è –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ.\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–Ω–∞—á—å—Ç–µ –±–æ—Ç—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∞–≤–∞ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É."
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–∏–≤—à–µ–≥–æ –∫–æ–º–∞–Ω–¥—É
        user_chat_member = await message.bot.get_chat_member(chat_id, user_id)
        if user_chat_member.status not in ["creator", "administrator"]:
            await message.answer(
                "‚ö†Ô∏è –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≥—Ä—É–ø–ø—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É."
            )
            return
        
        async with AsyncSessionLocal() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ –≥—Ä—É–ø–ø–∞
            existing_group_q = select(Group).filter(Group.chat_id == chat_id)
            existing_group_result = await session.execute(existing_group_q)
            existing_group = existing_group_result.scalar_one_or_none()
            
            if existing_group:
                # –ì—Ä—É–ø–ø–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –æ–Ω–∞ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                if existing_group.added_by == user_id:
                    await message.answer(
                        f"‚ö†Ô∏è –≠—Ç–∞ –≥—Ä—É–ø–ø–∞ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∫ –±–æ—Ç—É."
                    )
                else:
                    await message.answer(
                        f"‚ö†Ô∏è –≠—Ç–∞ –≥—Ä—É–ø–ø–∞ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∫ –±–æ—Ç—É –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."
                    )
                return
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π SQL –∑–∞–ø—Ä–æ—Å –≤–º–µ—Å—Ç–æ ORM
            # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ö–û–î: –ò—Å–ø–æ–ª—å–∑—É–µ–º text() –¥–ª—è SQL –∑–∞–ø—Ä–æ—Å–∞
            sql = text("""
            INSERT INTO groups (chat_id, title, added_by, date_added) 
            VALUES (:chat_id, :title, :added_by, CURRENT_TIMESTAMP)
            """)
            await session.execute(sql, {
                "chat_id": chat_id,
                "title": chat_title,
                "added_by": user_id
            })
            await session.commit()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_q = select(User).filter(User.user_id == user_id)
            user_result = await session.execute(user_q)
            user = user_result.scalar_one_or_none()
            
            if user:
                user.current_chat_id = chat_id
                await session.commit()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
            await message.answer(
                f"‚úÖ –ì—Ä—É–ø–ø–∞ \"{chat_title}\" —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∫ –±–æ—Ç—É!\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º."
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–∏—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.bot.send_message(
                user_id,
                f"‚úÖ –ì—Ä—É–ø–ø–∞ \"{chat_title}\" —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã."
            )
            
    except Exception as e:
        logger.error(f"Error connecting group: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(lambda m: m.text == "–°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É")
async def change_group(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É' –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    user_id = message.from_user.id
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞–Ω–∞–ª–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        keyboard = await create_channels_keyboard(user_id)
        
        await message.answer(
            "üìù <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–∞–±–æ—Ç—ã</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é.",
            parse_mode="HTML",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"Error in change_group handler: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(Command('channels'))
async def cmd_channels(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /channels –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤"""
    user_id = message.from_user.id
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞–Ω–∞–ª–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        keyboard = await create_channels_keyboard(user_id)
        
        await message.answer(
            "üìù <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–∞–±–æ—Ç—ã</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é.",
            parse_mode="HTML",
            reply_markup=keyboard
        )
        
    except Exception as e:
        
        logger.error(f"Error in cmd_channels handler: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã
@router.callback_query(lambda c: c.data and c.data.startswith("select_channel_"))
async def process_channel_selection(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã"""
    user_id = call.from_user.id
    
    try:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"Select channel callback received: {call.data}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–∞–Ω–∞–ª–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–ª–±—ç–∫–∞
        channel_id = int(call.data.split("_")[2])
        logger.info(f"Extracted channel_id: {channel_id}")
        
        async with AsyncSessionLocal() as session:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            channel_q = select(Group).filter(Group.id == channel_id)
            channel_result = await session.execute(channel_q)
            channel = channel_result.scalar_one_or_none()
            
            if not channel:
                logger.error(f"Channel with id {channel_id} not found")
                await call.answer("‚ö†Ô∏è –í—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            logger.info(f"Found channel: {channel.title}, chat_id: {channel.chat_id}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_q = select(User).filter(User.user_id == user_id)
            user_result = await session.execute(user_q)
            user = user_result.scalar_one_or_none()
            
            if user:
                user.current_chat_id = channel.chat_id
                await session.commit()
                logger.info(f"Updated user current_chat_id to {channel.chat_id}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(
                chat_id=channel.chat_id,
                group_id=channel.id,  # –î–æ–±–∞–≤–ª—è–µ–º ID –≥—Ä—É–ø–ø—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                current_channel_title=channel.title
            )
            logger.info(f"Saved group data to state: id={channel.id}, title={channel.title}, chat_id={channel.chat_id}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç")],
                    [KeyboardButton(text="–ö–æ–Ω—Ç–µ–Ω—Ç –ø–ª–∞–Ω (–û—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π)")],
                    [KeyboardButton(text="–ò—Å—Ç–æ—Ä–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π")],
                    [KeyboardButton(text="–¢–∞–±–ª–∏—Ü—ã Google Sheets")],
                    [KeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True,
                is_persistent=True
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ –∫–∞–Ω–∞–ª–∞
            try:
                await call.message.edit_text(
                    f"‚úÖ –ö–∞–Ω–∞–ª \"{channel.title}\" –≤—ã–±—Ä–∞–Ω!\n\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                )
            except Exception as edit_error:
                logger.error(f"Error editing message: {edit_error}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                await call.message.answer(
                    f"‚úÖ –ö–∞–Ω–∞–ª \"{channel.title}\" –≤—ã–±—Ä–∞–Ω!\n\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await call.message.answer(
                f"–†–∞–±–æ—Ç–∞–µ–º —Å –∫–∞–Ω–∞–ª–æ–º: \"{channel.title}\"",
                reply_markup = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="create_post")],
                    [InlineKeyboardButton(text="–ö–æ–Ω—Ç–µ–Ω—Ç –ø–ª–∞–Ω", callback_data="show_schedule")],
                    [InlineKeyboardButton(text="–ò—Å—Ç–æ—Ä–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π", callback_data="post_history")],
                    [InlineKeyboardButton(text="–¢–∞–±–ª–∏—Ü—ã Google Sheets", callback_data="open_sheets_menu")],
                    [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                ])
            )
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–ª–±—ç–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
            await call.answer()
            
    except Exception as e:
        logger.error(f"Error selecting channel: {e}")
        await call.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞–Ω–∞–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –æ—à–∏–±–∫–∏
        await call.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.message(lambda m: m.text == "–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç")
async def create_post_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç'"""
    user_data = await state.get_data()
    current_channel = user_data.get("current_channel_title", "—Ç–µ–∫—É—â–µ–º –∫–∞–Ω–∞–ª–µ")
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data="post_manual")],
        [InlineKeyboardButton(text="ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å –ø–æ–º–æ—â—å—é –ò–ò", callback_data="post_auto")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    
    await message.answer(
        f"üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ \"{current_channel}\"</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞:",
        parse_mode="HTML",
        reply_markup=markup
    )

@router.message(lambda m: m.text == "–ö–æ–Ω—Ç–µ–Ω—Ç –ø–ª–∞–Ω (–û—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π)" or m.text == "–ö–æ–Ω—Ç–µ–Ω—Ç –ø–ª–∞–Ω")
async def content_plan_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ö–æ–Ω—Ç–µ–Ω—Ç –ø–ª–∞–Ω'"""
    user_data = await state.get_data()
    current_channel = user_data.get("current_channel_title", "—Ç–µ–∫—É—â–µ–º –∫–∞–Ω–∞–ª–µ")
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞
    await message.answer(
        f"üìÖ <b>–ö–æ–Ω—Ç–µ–Ω—Ç –ø–ª–∞–Ω –∫–∞–Ω–∞–ª–∞ \"{current_channel}\"</b>\n\n"
        f"–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.",
        parse_mode="HTML"
    )

@router.message(lambda m: m.text == "–ò—Å—Ç–æ—Ä–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π")
async def history_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ò—Å—Ç–æ—Ä–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π'"""
    user_data = await state.get_data()
    current_channel = user_data.get("current_channel_title", "—Ç–µ–∫—É—â–µ–º –∫–∞–Ω–∞–ª–µ")
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
    await message.answer(
        f"üìã <b>–ò—Å—Ç–æ—Ä–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∫–∞–Ω–∞–ª–∞ \"{current_channel}\"</b>\n\n"
        f"–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∏—Å—Ç–æ—Ä–∏—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤.",
        parse_mode="HTML"
    )
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –¢–∞–±–ª–∏—Ü—ã Google Sheets –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –∏ –¥–ª—è –∏–Ω–ª–∞–π–Ω –ù–ê–ß–ê–õ–û
 
@router.message(lambda m: m.text == "–¢–∞–±–ª–∏—Ü—ã Google Sheets" or m.text == "–¢–∞–±–ª–∏—Ü—ã")
async def sheets_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–¢–∞–±–ª–∏—Ü—ã Google Sheets'"""
    user_data = await state.get_data()
    current_channel = user_data.get("current_channel_title", "—Ç–µ–∫—É—â–µ–º –∫–∞–Ω–∞–ª–µ")
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –ü–æ–¥–∫–ª—é—á–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É", callback_data="sheet_connect")],
        [InlineKeyboardButton(text="üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å", callback_data="sheet_sync")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    
    await message.answer(
        f"üìä <b>–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Sheets –¥–ª—è –∫–∞–Ω–∞–ª–∞ \"{current_channel}\"</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏:",
        parse_mode="HTML",
        reply_markup=markup
    )

@router.callback_query(F.data == "open_sheets_menu")  # –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
async def sheets_callback_handler(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    current_channel = user_data.get("current_channel_title", "—Ç–µ–∫—É—â–µ–º –∫–∞–Ω–∞–ª–µ")
    
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –ü–æ–¥–∫–ª—é—á–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É", callback_data="sheet_connect")],
        [InlineKeyboardButton(text="üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å", callback_data="sheet_sync")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    
    await callback.message.answer(
        f"üìä <b>–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Sheets –¥–ª—è –∫–∞–Ω–∞–ª–∞ \"{current_channel}\"</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏:",
        parse_mode="HTML",
        reply_markup=markup
    )
    await callback.answer()

# –û–ë–†–ê–ë–û–¢–ß–ò–ö –¢–∞–±–ª–∏—Ü—ã Google Sheets –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –∏ –¥–ª—è –∏–Ω–ª–∞–π–Ω –ö–û–ù–ï–¶



@router.message(lambda m: m.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥" or m.text == "üîô –°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É" or m.text == "–°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É")
async def back_to_channels_list(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'/'–°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É'"""
    user_id = message.from_user.id
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞–Ω–∞–ª–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        keyboard = await create_channels_keyboard(user_id)
        
        await message.answer(
            "üìù <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–∞–±–æ—Ç—ã</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é.",
            parse_mode="HTML",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"Error in back_to_channels_list handler: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è inline –∫–Ω–æ–ø–æ–∫
@router.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main_menu(call: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é"""
    user_data = await state.get_data()
    current_channel = user_data.get("current_channel_title", "—Ç–µ–∫—É—â–µ–º –∫–∞–Ω–∞–ª–µ")
    
    await call.message.edit_text(
        f"–í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Å –∫–∞–Ω–∞–ª–æ–º \"{current_channel}\"\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ."
    )
    
    await call.answer()

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–ê–°–¢–†–û–ô–ö–ò
@router.message(lambda m: m.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" or m.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'"""
    user_data = await state.get_data()
    current_channel = user_data.get("current_channel_title", "—Ç–µ–∫—É—â–µ–º –∫–∞–Ω–∞–ª–µ")
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üñäÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data="settings_rename")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    
    await message.answer(
        f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞ \"{current_channel}\"</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
        parse_mode="HTML",
        reply_markup=markup
    )

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä—É—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
@router.callback_query(lambda c: c.data == "post_manual")
async def handle_post_manual(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä—É—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    user_data = await state.get_data()
    current_channel = user_data.get("current_channel_title", "—Ç–µ–∫—É—â–µ–º –∫–∞–Ω–∞–ª–µ")
    group_id = user_data.get("group_id")
    chat_id = user_data.get("chat_id")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ –∫–∞–Ω–∞–ª
    if not group_id or not chat_id:
        await call.message.edit_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã")
        await call.answer()
        return
    
    # –ñ—É—Ä–Ω–∞–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"Starting manual post creation for channel: {current_channel} (id={group_id}, chat_id={chat_id})")
    
    # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
    await call.message.edit_text(
        f"üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –≤—Ä—É—á–Ω—É—é –¥–ª—è –∫–∞–Ω–∞–ª–∞ \"{current_channel}\"</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –ø–æ—Å—Ç–∞. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram:\n"
        f"*–∂–∏—Ä–Ω—ã–π* _–∫—É—Ä—Å–∏–≤_ `–∫–æ–¥` [—Å—Å—ã–ª–∫–∞](URL)",
        parse_mode="HTML"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_post")]
    ])
    
    await call.message.answer(
        "–î–ª—è –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=markup
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞ –∏ –ø–µ—Ä–µ–¥–∞–µ–º group_id
    # –î–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ states/post_states.py
    from states.post_states import ManualPostStates
    await state.set_state(ManualPostStates.waiting_for_content)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–ø–ø–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        group_id=group_id,
        chat_id=chat_id,
        current_channel_title=current_channel
    )
    
    await call.answer()


@router.callback_query(lambda c: c.data == "cancel_post")
async def cancel_post_creation(call: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    user_data = await state.get_data()
    current_channel = user_data.get("current_channel_title", "—Ç–µ–∫—É—â–µ–º –∫–∞–Ω–∞–ª–µ")
    
    await call.message.edit_text(
        f"‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ \"{current_channel}\" –æ—Ç–º–µ–Ω–µ–Ω–æ."
    )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é
    await back_to_main(call, state)

@router.callback_query(lambda c: c.data == "back_to_create_options")
async def back_to_create_options(call: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    user_data = await state.get_data()
    current_channel = user_data.get("current_channel_title", "—Ç–µ–∫—É—â–µ–º –∫–∞–Ω–∞–ª–µ")
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data="post_manual")],
        [InlineKeyboardButton(text="ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å –ø–æ–º–æ—â—å—é –ò–ò", callback_data="post_auto")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    
    await call.message.edit_text(
        f"üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ \"{current_channel}\"</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞:",
        parse_mode="HTML",
        reply_markup=markup
    )


