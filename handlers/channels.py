import logging
import re
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select, update
from sqlalchemy.exc import SQLAlchemyError

from database.db import AsyncSessionLocal
from database.models import User, Group
from utils.keyboards import create_channels_keyboard, create_main_keyboard

router = Router()
logger = logging.getLogger(__name__)

class ChannelStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏/–≥—Ä—É–ø–ø–∞–º–∏"""
    waiting_for_channel_message = State()
    waiting_for_channel_username = State()
    waiting_for_group_command = State()
    waiting_for_display_name = State()

async def validate_channel_ownership(user_id: int, chat_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –∫–∞–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(Group).where(
                Group.chat_id == chat_id,
                Group.added_by == user_id
            )
        )
        return result.scalar_one_or_none() is not None

async def update_user_current_chat(user_id: int, chat_id: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with AsyncSessionLocal() as session:
        try:
            await session.execute(
                update(User)
                .where(User.user_id == user_id)
                .values(current_chat_id=chat_id)
            )
            await session.commit()
        except SQLAlchemyError as e:
            logger.error(f"Error updating user current chat: {e}")
            raise

@router.callback_query(lambda c: c.data == "add_channel")
async def add_channel_callback(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
    try:
        await call.message.edit_text(
            "üìå –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üì£ –ö–∞–Ω–∞–ª", callback_data="add_channel_type")],
                [InlineKeyboardButton(text="üë• –ì—Ä—É–ø–ø—É", callback_data="add_group_type")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_channels")]
            ])
        )
    except Exception as e:
        logger.error(f"Error in add_channel_callback: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(lambda c: c.data == "add_channel_type")
async def process_add_channel(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
    try:
        await state.update_data(adding_type="channel")
        bot_username = call.bot.username
        await call.message.edit_text(
            f"üì£ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞</b>\n\n"
            f"–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:\n\n"
            f"1) –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ @{bot_username} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –∫–∞–Ω–∞–ª\n"
            f"2) –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –±–æ—Ç–∞ –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            f"3) –ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –≤ —ç—Ç–æ—Ç —á–∞—Ç\n"
            f"<b>–ò–õ–ò</b>\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ @username –∫–∞–Ω–∞–ª–∞ (–µ—Å–ª–∏ –æ–Ω –ø—É–±–ª–∏—á–Ω—ã–π)",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_add_select")]
            ])
        )
        await state.set_state(ChannelStates.waiting_for_channel_message)
    except Exception as e:
        logger.error(f"Error in process_add_channel: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(ChannelStates.waiting_for_channel_message)
async def process_channel_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ @username"""
    user_id = message.from_user.id
    
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ @username –∫–∞–Ω–∞–ª–∞
        if message.text and message.text.startswith('@'):
            channel_username = message.text.strip()
            if not re.match(r'^@[a-zA-Z0-9_]{5,32}$', channel_username):
                await message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username –∫–∞–Ω–∞–ª–∞. –î–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @ –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 5-32 —Å–∏–º–≤–æ–ª–æ–≤ (a-z, 0-9, _)")
                return
                
            await state.update_data(channel_username=channel_username)
            await message.answer(
                f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–∞–Ω–∞–ª {channel_username}...\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞:"
            )
            await state.set_state(ChannelStates.waiting_for_display_name)
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if not message.forward_from_chat or message.forward_from_chat.type != "channel":
            await message.answer(
                "‚ö†Ô∏è –≠—Ç–æ –Ω–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ "
                "–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ @username –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞."
            )
            return

        chat = message.forward_from_chat
        async with AsyncSessionLocal() as session:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞
            existing_group = await session.execute(
                select(Group).where(Group.chat_id == chat.id)
            )
            if existing_group.scalar_one_or_none():
                await message.answer("‚ö†Ô∏è –≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É.")
                await state.clear()
                return

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            new_group = Group(
                chat_id=chat.id,
                title=chat.title,
                username=chat.username,
                display_name=chat.title,
                type="channel",
                added_by=user_id,
                is_active=True
            )
            session.add(new_group)
            await session.commit()

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await update_user_current_chat(user_id, chat.id)

            await message.answer(
                f"‚úÖ –ö–∞–Ω–∞–ª \"{chat.title}\" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞."
            )

            # –ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
            keyboard = await create_channels_keyboard(user_id)
            await message.answer(
                "üìù <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã</b>",
                parse_mode="HTML",
                reply_markup=keyboard
            )
            await state.clear()

    except Exception as e:
        logger.error(f"Error in process_channel_message: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞.")
        await state.clear()

@router.message(ChannelStates.waiting_for_display_name)
async def process_display_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–º–µ–Ω–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞"""
    user_id = message.from_user.id
    display_name = message.text.strip()
    
    if not display_name or len(display_name) > 100:
        await message.answer("‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 1-100 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    try:
        user_data = await state.get_data()
        channel_username = user_data.get("channel_username")
        username_without_at = channel_username.lstrip('@')

        async with AsyncSessionLocal() as session:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞
            existing_group = await session.execute(
                select(Group).where(Group.username == username_without_at)
            )
            if existing_group.scalar_one_or_none():
                await message.answer(f"‚ö†Ô∏è –ö–∞–Ω–∞–ª {channel_username} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω.")
                await state.clear()
                return

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
            new_group = Group(
                chat_id=0,  # –í—Ä–µ–º–µ–Ω–Ω–æ 0, –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ
                title=display_name,
                username=username_without_at,
                display_name=display_name,
                type="channel",
                added_by=user_id,
                is_active=True
            )
            session.add(new_group)
            await session.commit()

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await update_user_current_chat(user_id, new_group.id)

            await message.answer(
                f"‚úÖ –ö–∞–Ω–∞–ª {channel_username} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ \"{display_name}\"!\n\n"
                f"‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ @{message.bot.username} –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                parse_mode="HTML"
            )

            keyboard = await create_channels_keyboard(user_id)
            await message.answer(
                "üìù <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã</b>",
                parse_mode="HTML",
                reply_markup=keyboard
            )
            await state.clear()

    except Exception as e:
        logger.error(f"Error in process_display_name: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞.")
        await state.clear()

@router.callback_query(lambda c: c.data.startswith("select_channel_"))
async def process_channel_selection(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã"""
    user_id = call.from_user.id
    channel_id = int(call.data.split("_")[2])
    
    try:
        async with AsyncSessionLocal() as session:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ
            channel = await session.execute(
                select(Group).where(Group.id == channel_id)
            )
            channel = channel.scalar_one_or_none()
            
            if not channel:
                await call.answer("‚ö†Ô∏è –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await update_user_current_chat(user_id, channel.chat_id)

            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç")],
                    [KeyboardButton(text="–ö–æ–Ω—Ç–µ–Ω—Ç –ø–ª–∞–Ω"), KeyboardButton(text="–ò—Å—Ç–æ—Ä–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π")],
                    [KeyboardButton(text="–¢–∞–±–ª–∏—Ü—ã"), KeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
                    [KeyboardButton(text="–°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É")]
                ],
                resize_keyboard=True
            )

            await call.message.answer(
                f"‚úÖ –ö–∞–Ω–∞–ª \"{channel.title}\" –≤—ã–±—Ä–∞–Ω!",
                reply_markup=keyboard
            )
            await call.answer()

    except Exception as e:
        logger.error(f"Error in process_channel_selection: {e}")
        await call.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞–Ω–∞–ª–∞.")

@router.message(Command('channels'))
async def cmd_channels(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /channels"""
    try:
        keyboard = await create_channels_keyboard(message.from_user.id)
        await message.answer(
            "üìù <b>–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã –∏ –≥—Ä—É–ø–ø—ã</b>",
            parse_mode="HTML",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"Error in cmd_channels: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤.")

@router.message(F.text == "–°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É")
async def change_group(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Å–º–µ–Ω—ã –≥—Ä—É–ø–ø—ã"""
    await cmd_channels(message)
