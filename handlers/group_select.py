from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from database.db import AsyncSessionLocal
from database.models import Group
from keyboards.main import main_menu_kb
import logging

print("üîé handlers.group_select imported")

router = Router()
logger = logging.getLogger(__name__)

@router.message(F.text == "üîô –°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É")
async def change_group(message: Message):
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã
    await choose_group(message)

# –í—ã–¥–µ–ª—è–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –¥–æ—Å—Ç—É–ø–Ω—É—é –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
async def choose_group(message: Message):
    # –°–æ–∑–¥–∞–¥–∏–º –±–∞–∑–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    buttons = [[InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø", callback_data="open_group_settings")]]
    ikb = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    try:
        # –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≥—Ä—É–ø–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–±–∞–≤–∏–ª —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with AsyncSessionLocal() as session:
            try:
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
                try:
                    # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å - –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞
                    query = select(Group)
                    result = await session.execute(query)
                    groups = result.scalars().all()
                    
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –≥—Ä—É–ø–ø—ã –∏ –ø–æ–ª–µ added_by —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, 
                    # –ø–æ–ø—Ä–æ–±—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if groups:
                        try:
                            user_id = message.from_user.id
                            filtered_groups = [g for g in groups if hasattr(g, 'added_by') and g.added_by == user_id]
                            if filtered_groups:
                                groups = filtered_groups
                        except Exception as filter_err:
                            logger.error(f"Error filtering groups: {filter_err}")
                except Exception as e:
                    logger.error(f"Error getting groups: {e}")
                    groups = []
                    
                # —Å–æ–±—Ä–∞—Ç—å inline‚Äë–∫–Ω–æ–ø–∫–∏: —Å–Ω–∞—á–∞–ª–∞ –≥—Ä—É–ø–ø—ã, –∑–∞—Ç–µ–º –≤—Å–µ–≥–¥–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
                if groups:
                    buttons = [
                        [InlineKeyboardButton(text=g.title, callback_data=f"sel_{g.id}")]
                        for g in groups
                    ]
                    # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
                    buttons.append([InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø", callback_data="open_group_settings")])
                    ikb = InlineKeyboardMarkup(inline_keyboard=buttons)
                
                if not groups:
                    # –Ω–µ—Ç –≥—Ä—É–ø–ø ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ + –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    await message.answer(
                        "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≥—Ä—É–ø–ø. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é.",
                        reply_markup=ikb
                    )
                    return
    
                # –µ—Å—Ç—å –≥—Ä—É–ø–ø—ã ‚Äî –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å
                await message.answer(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É, —Å –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å:",
                    reply_markup=ikb
                )
            except Exception as e:
                logger.error(f"Exception in choose_group: {e}")
                # –í —Å–ª—É—á–∞–µ –ª—é–±–æ–π –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                await message.answer(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É.",
                    reply_markup=ikb
                )
    except Exception as e:
        logger.error(f"Fatal error in choose_group: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞."
        )

@router.callback_query(F.data.startswith("sel_"))
async def select_group(call: CallbackQuery, state: FSMContext):
    try:
        group_id = int(call.data.split("_")[1])
        # –∑–∞–ø–æ–º–Ω–∏—Ç—å –≤—ã–±–æ—Ä
        await state.set_data({"group_id": group_id})
        # —É–±—Ä–∞—Ç—å inline‚Äë–º–µ–Ω—é –≤—ã–±–æ—Ä–∞
        await call.message.delete()
        # –ø–æ–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ reply‚Äë–º–µ–Ω—é
        await call.message.answer(
            "‚úÖ –ì—Ä—É–ø–ø–∞ –≤—ã–±—Ä–∞–Ω–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_menu_kb()
        )
    except Exception as e:
        logger.error(f"Error in select_group: {e}")
        await call.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥—Ä—É–ø–ø—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.callback_query(F.data == "open_group_settings")
async def open_settings(call: CallbackQuery):
    try:
        # —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await call.message.delete()
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã
        await call.bot.send_message(
            call.from_user.id,
            "–ü–µ—Ä–µ—à–ª–∏—Ç–µ –±–æ—Ç—É –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ—ë."
        )
    except Exception as e:
        logger.error(f"Error in open_settings: {e}")
        await call.bot.send_message(
            call.from_user.id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞."
        )
