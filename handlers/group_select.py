from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from database.db import AsyncSessionLocal
from database.models import Group
from keyboards.main import main_menu_kb

print("üîé handlers.group_select imported")

router = Router()

@router.message(F.text == "üîô –°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É")
async def choose_group(message: Message):
    # –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≥—Ä—É–ø–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–±–∞–≤–∏–ª —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    async with AsyncSessionLocal() as session:
        groups = (await session.execute(
            select(Group).where(Group.added_by == message.from_user.id)
        )).scalars().all()

    # —Å–æ–±—Ä–∞—Ç—å inline‚Äë–∫–Ω–æ–ø–∫–∏: —Å–Ω–∞—á–∞–ª–∞ –≥—Ä—É–ø–ø—ã, –∑–∞—Ç–µ–º –≤—Å–µ–≥–¥–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
    buttons = [
        [InlineKeyboardButton(text=g.title, callback_data=f"sel_{g.id}")]
        for g in groups
    ]
    # –∏–∫–æ–Ω–∫–∞ ¬´‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø¬ª –≤—Å–µ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π
    buttons.append([InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø", callback_data="open_group_settings")])
    ikb = InlineKeyboardMarkup(inline_keyboard=buttons)

    if not groups:
        # –Ω–µ—Ç –≥—Ä—É–ø–ø ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ + –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞
        await message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≥—Ä—É–ø–ø. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é.",
            reply_markup=ikb
        )
        return

    # –µ—Å—Ç—å –≥—Ä—É–ø–ø—ã ‚Äî –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É, —Å –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å:",
        reply_markup=ikb
    )

@router.callback_query(F.data.startswith("sel_"))
async def select_group(call: CallbackQuery, state: FSMContext):
    group_id = int(call.data.split("_")[1])
    # –∑–∞–ø–æ–º–Ω–∏—Ç—å –≤—ã–±–æ—Ä
    await state.set_data({"group_id": group_id})
    # —É–±—Ä–∞—Ç—å inline‚Äë–º–µ–Ω—é –≤—ã–±–æ—Ä–∞
    await call.message.delete()
    # –ø–æ–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ reply‚Äë–º–µ–Ω—é
    await call.message.answer(
        "‚úÖ –ì—Ä—É–ø–ø–∞ –≤—ã–±—Ä–∞–Ω–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_kb()
    )

@router.callback_query(F.data == "open_group_settings")
async def open_settings(call: CallbackQuery):
    # —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await call.message.delete()
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã
    await call.bot.send_message(
        call.from_user.id,
        "–ü–µ—Ä–µ—à–ª–∏—Ç–µ –±–æ—Ç—É –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ—ë."
    )
