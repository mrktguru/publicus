# handlers/auto_generation.py
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import json
from datetime import datetime, timezone
import asyncio
import logging
from sqlalchemy import select

from database.db import AsyncSessionLocal
from database.models import Post, Group
from gpt_client import generate_article
from utils.prompt_manager import (
    PRO_MODE, BASIC_MODE, CONTENT_TYPES, TONES, STRUCTURE_OPTIONS, 
    LENGTH_OPTIONS, BLOG_TOPICS, validate_pro_prompt, build_basic_prompt
)

router = Router()
logger = logging.getLogger(__name__)

class AutoGenStates(StatesGroup):
    # –ù–∞—á–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞
    mode_selection = State()
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–∂–∏–º–∞ BASIC
    blog_topic = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º–∞—Ç–∏–∫–∏ –±–ª–æ–≥–∞
    content_type = State()
    themes = State()
    tone = State()
    structure = State()
    length = State()
    post_count = State()
    preview = State()
    moderation = State()
    confirmation = State()
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–∂–∏–º–∞ PRO
    pro_prompt = State()
    pro_preview = State()
    pro_post_count = State()
    pro_moderation = State()
    pro_confirmation = State()


@router.message(lambda m: m.text and m.text.startswith("ü§ñ –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤"))
async def start_auto_gen(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
    user_data = await state.get_data()
    group_id = user_data.get("group_id")
    
    if not group_id:
        await message.answer(
            "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–∞–Ω–∞–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üîô –°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º group_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(group_id=group_id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
    try:
        async with AsyncSessionLocal() as session:
            group = await session.get(Group, group_id)
            if group:
                await state.update_data(chat_id=group.chat_id)
    except Exception as e:
        logger.error(f"Error fetching group: {e}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
    kb = [
        [InlineKeyboardButton(text="üîß –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä (BASIC)", callback_data="mode_basic")],
        [InlineKeyboardButton(text="üìù –°–≤–æ–π –ø—Ä–æ–º–ø—Ç (PRO)", callback_data="mode_pro")]
    ]
    
    markup = InlineKeyboardMarkup(inline_keyboard=kb)
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞:\n\n"
        "üîß <b>–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä (BASIC)</b> - –ø–æ—à–∞–≥–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n\n"
        "üìù <b>–°–≤–æ–π –ø—Ä–æ–º–ø—Ç (PRO)</b> - –Ω–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–º–ø—Ç —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ",
        reply_markup=markup,
        parse_mode="HTML"
    )
    
    await state.set_state(AutoGenStates.mode_selection)


@router.callback_query(AutoGenStates.mode_selection)
async def process_mode_selection(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    mode = call.data.split("_")[1]
    
    if mode == "basic":
        # –ù–∞—á–∏–Ω–∞–µ–º —Å –≤—ã–±–æ—Ä–∞ —Ç–µ–º–∞—Ç–∏–∫–∏ –±–ª–æ–≥–∞ –≤ —Ä–µ–∂–∏–º–µ BASIC
        kb = []
        for code, name in BLOG_TOPICS.items():
            kb.append([InlineKeyboardButton(text=name, callback_data=f"blog_{code}")])
        
        markup = InlineKeyboardMarkup(inline_keyboard=kb)
        
        await call.message.edit_text(
            "–í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º <b>–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä (BASIC)</b>\n\n"
            "–®–∞–≥ 1: –í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–µ–º–∞—Ç–∏–∫—É –±–ª–æ–≥–∞:",
            parse_mode="HTML",
            reply_markup=markup
        )
        await state.set_state(AutoGenStates.blog_topic)
        
    elif mode == "pro":
        await call.message.edit_text(
            "–í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º <b>–°–≤–æ–π –ø—Ä–æ–º–ø—Ç (PRO)</b>\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤:\n"
            "- \"–ù–∞–ø–∏—à–∏ —Å—Ç–∞—Ç—å—é –æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞—Ö —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ —ç–∫–æ–ª–æ–≥–∏—é\"\n"
            "- \"–°–æ–∑–¥–∞–π –ø–æ—Å—Ç —Å —Ç—Ä–µ–º—è –º–∞–ª–æ–∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ —Ñ–∞–∫—Ç–∞–º–∏ –æ –∫–æ—Å–º–æ—Å–µ\"\n"
            "- \"–°—Ä–∞–≤–Ω–∏ iPhone –∏ Android —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞\"\n\n"
            "<i>–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ–º–ø—Ç –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏</i>",
            parse_mode="HTML"
        )
        await state.set_state(AutoGenStates.pro_prompt)


# ------------------ BASIC MODE HANDLERS ------------------

@router.callback_query(AutoGenStates.blog_topic, F.data.startswith("blog_"))
async def process_blog_topic(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º–∞—Ç–∏–∫–∏ –±–ª–æ–≥–∞"""
    blog_topic_code = call.data.split("_")[1]
    blog_topic_name = BLOG_TOPICS[blog_topic_code]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
    await state.update_data(blog_topic_code=blog_topic_code, blog_topic_name=blog_topic_name)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    kb = []
    for code, name in CONTENT_TYPES.items():
        kb.append([InlineKeyboardButton(text=name, callback_data=f"ct_{code}")])
    
    markup = InlineKeyboardMarkup(inline_keyboard=kb)
    
    await call.message.edit_text(
        f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ —Ç–µ–º–∞—Ç–∏–∫–∞: {blog_topic_name}\n\n"
        f"–®–∞–≥ 2: –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:",
        reply_markup=markup
    )
    
    await state.set_state(AutoGenStates.content_type)


@router.callback_query(AutoGenStates.content_type, F.data.startswith("ct_"))
async def process_content_type(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    content_type_code = call.data.split("_")[1]
    content_type_name = CONTENT_TYPES[content_type_code]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(content_type_code=content_type_code, content_type_name=content_type_name)
    
    user_data = await state.get_data()
    blog_topic_name = user_data.get("blog_topic_name", "")
    
    await call.message.edit_text(
        f"‚úÖ –í—ã–±—Ä–∞–Ω —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {content_type_name}\n\n"
        f"–®–∞–≥ 3: –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç–µ–º—É –ø–æ—Å—Ç–∞ –¥–ª—è {blog_topic_name}:\n\n"
        f"–ù–∞–ø—Ä–∏–º–µ—Ä: –ù–æ–≤–µ–π—à–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞"
    )
    
    await state.set_state(AutoGenStates.themes)


@router.message(AutoGenStates.themes)
async def process_themes(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–º—ã –ø–æ—Å—Ç–∞"""
    themes = message.text.strip()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º—ã
    await state.update_data(themes=themes)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–Ω–∞
    kb = []
    for code, name in TONES.items():
        kb.append([InlineKeyboardButton(text=name, callback_data=f"tone_{code}")])
    
    markup = InlineKeyboardMarkup(inline_keyboard=kb)
    
    await message.answer(
        f"‚úÖ –¢–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {themes}\n\n"
        f"–®–∞–≥ 4: –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–Ω –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è:",
        reply_markup=markup
    )
    
    await state.set_state(AutoGenStates.tone)


@router.callback_query(AutoGenStates.tone, F.data.startswith("tone_"))
async def process_tone(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–æ–Ω–∞ –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è"""
    tone_code = call.data.split("_")[1]
    tone_name = TONES[tone_code]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–Ω
    await state.update_data(tone_code=tone_code, tone_name=tone_name)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä)
    structure_kb = []
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É (–µ—Å–ª–∏ —É–∂–µ –≤—ã–±–∏—Ä–∞–ª–∏)
    user_data = await state.get_data()
    structure = user_data.get("structure", {"main": True})
    
    for code, name in STRUCTURE_OPTIONS.items():
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–±–∏—Ä–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
        is_selected = structure.get(code, code == "main")
        checkbox = "‚òëÔ∏è" if is_selected else "‚¨ú"
        structure_kb.append([
            InlineKeyboardButton(
                text=f"{checkbox} {name}", 
                callback_data=f"struct_{code}_{1 if is_selected else 0}"
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    structure_kb.append([InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="struct_confirm")])
    
    markup = InlineKeyboardMarkup(inline_keyboard=structure_kb)
    
    await call.message.edit_text(
        f"‚úÖ –í—ã–±—Ä–∞–Ω —Ç–æ–Ω: {tone_name}\n\n"
        f"–®–∞–≥ 5: –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ—Å—Ç–∞ (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
        reply_markup=markup
    )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –µ—Å–ª–∏ –µ–µ –µ—â–µ –Ω–µ—Ç
    if "structure" not in user_data:
        await state.update_data(structure={"main": True})
    
    await state.set_state(AutoGenStates.structure)


@router.callback_query(AutoGenStates.structure, F.data.startswith("struct_"))
async def process_structure_selection(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
    data = call.data.split("_")
    
    # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞
    if data[1] == "confirm":
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –¥–ª–∏–Ω—ã
        kb = []
        for code, name in LENGTH_OPTIONS.items():
            kb.append([InlineKeyboardButton(text=name, callback_data=f"len_{code}")])
        
        markup = InlineKeyboardMarkup(inline_keyboard=kb)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        user_data = await state.get_data()
        structure = user_data.get("structure", {})
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        selected_items = [name for code, name in STRUCTURE_OPTIONS.items() if structure.get(code, False)]
        structure_text = ", ".join(selected_items)
        
        await call.message.edit_text(
            f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {structure_text}\n\n"
            f"–®–∞–≥ 6: –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—É—é –¥–ª–∏–Ω—É –ø–æ—Å—Ç–∞:",
            reply_markup=markup
        )
        
        await state.set_state(AutoGenStates.length)
        return
    
    # –ò–Ω–∞—á–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    component = data[1]
    is_selected = int(data[2]) == 1
    
    # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞
    new_state = 0 if is_selected else 1
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_data = await state.get_data()
    structure = user_data.get("structure", {})
    structure[component] = not is_selected
    await state.update_data(structure=structure)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    structure_kb = []
    for code, name in STRUCTURE_OPTIONS.items():
        checkbox = "‚òëÔ∏è" if structure.get(code, False) else "‚¨ú"
        structure_kb.append([
            InlineKeyboardButton(
                text=f"{checkbox} {name}", 
                callback_data=f"struct_{code}_{1 if structure.get(code, False) else 0}"
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    structure_kb.append([InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="struct_confirm")])
    
    markup = InlineKeyboardMarkup(inline_keyboard=structure_kb)
    
    await call.message.edit_reply_markup(reply_markup=markup)


@router.callback_query(AutoGenStates.length, F.data.startswith("len_"))
async def process_length(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–ª–∏–Ω—ã –ø–æ—Å—Ç–∞"""
    length_code = call.data.split("_")[1]
    length_name = LENGTH_OPTIONS[length_code]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª–∏–Ω—É
    await state.update_data(length_code=length_code, length_name=length_name)
    
    await call.message.edit_text(
        f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –¥–ª–∏–Ω–∞: {length_name}\n\n"
        f"–®–∞–≥ 7: –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–æ—Ç 1 –¥–æ 30):"
    )
    
    await state.set_state(AutoGenStates.post_count)


@router.message(AutoGenStates.post_count)
async def process_post_count(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç–æ–≤"""
    try:
        count = int(message.text.strip())
        if count < 1:
            count = 1
        elif count > 30:
            count = 30
    except ValueError:
        count = 5  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    await state.update_data(post_count=count)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä –ø–æ—Å—Ç–∞
    user_data = await state.get_data()
    
    await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä –ø–æ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...")
    
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
        prompt = build_basic_prompt(user_data)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä –ø–æ—Å—Ç–∞
        example_text = await generate_article(prompt)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–º–µ—Ä –ø–æ—Å—Ç–∞
        await state.update_data(example_text=example_text)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ", callback_data="preview_ok")],
            [InlineKeyboardButton(text="üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –ø—Ä–∏–º–µ—Ä", callback_data="preview_regen")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="preview_back")]
        ])
        
        await message.answer(
            f"üìù –ü—Ä–∏–º–µ—Ä –ø–æ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:\n\n"
            f"{example_text}\n\n"
            f"–í–∞—Å —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —ç—Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç?",
            reply_markup=markup
        )
        
        await state.set_state(AutoGenStates.preview)
    
    except Exception as e:
        logger.error(f"Error generating preview: {e}")
        await message.answer(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä –ø–æ—Å—Ç–∞.\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã."
        )
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç–æ–≤
        await state.set_state(AutoGenStates.post_count)


@router.callback_query(AutoGenStates.preview)
async def process_preview_action(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º"""
    action = call.data.split("_")[1]
    
    if action == "ok":
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø—Ä–µ–º–æ–¥–µ—Ä–∞—Ü–∏–∏
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="mod_yes")],
            [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="mod_no")]
        ])
        
        await call.message.edit_text(
            "–®–∞–≥ 8: –í–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–º–æ–¥–µ—Ä–∞—Ü–∏—é –ø–æ—Å—Ç–æ–≤?\n\n"
            "–ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –ø—Ä–µ–º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∫–∞–∂–¥—ã–π –ø–æ—Å—Ç –±—É–¥–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –≤–∞—à–µ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π.",
            reply_markup=markup
        )
        
        await state.set_state(AutoGenStates.moderation)
    
    elif action == "regen":
        # –†–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä
        user_data = await state.get_data()
        
        await call.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –ø–æ—Å—Ç–∞...")
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
            prompt = build_basic_prompt(user_data)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —É–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
            prompt += " –°–æ–∑–¥–∞–π –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ—Å—Ç–∞, –æ—Ç–ª–∏—á–∞—é—â–∏–π—Å—è –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ."
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –ø–æ—Å—Ç–∞
            new_example_text = await generate_article(prompt)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –ø–æ—Å—Ç–∞
            await state.update_data(example_text=new_example_text)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ", callback_data="preview_ok")],
                [InlineKeyboardButton(text="üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –ø—Ä–∏–º–µ—Ä", callback_data="preview_regen")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="preview_back")]
            ])
            
            await call.message.edit_text(
                f"üìù –ù–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –ø–æ—Å—Ç–∞:\n\n"
                f"{new_example_text}\n\n"
                f"–í–∞—Å —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —ç—Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç?",
                reply_markup=markup
            )
        
        except Exception as e:
            logger.error(f"Error regenerating preview: {e}")
            await call.message.edit_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –ø–æ—Å—Ç–∞.\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ", callback_data="preview_ok")],
                [InlineKeyboardButton(text="üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –ø—Ä–∏–º–µ—Ä", callback_data="preview_regen")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="preview_back")]
            ])
            
            await call.message.edit_reply_markup(reply_markup=markup)
    
    elif action == "back":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await start_auto_gen(call.message, state)


@router.callback_query(AutoGenStates.moderation)
async def process_moderation_choice(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    mod_enabled = call.data == "mod_yes"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø—Ä–µ–º–æ–¥–µ—Ä–∞—Ü–∏–∏
    await state.update_data(moderation_enabled=mod_enabled)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    user_data = await state.get_data()
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
    selected_structure = [name for code, name in STRUCTURE_OPTIONS.items() 
                         if user_data["structure"].get(code, False)]
    structure_text = ", ".join(selected_structure)
    
    summary = (
        f"üìã –°–≤–æ–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n\n"
        f"üìå –¢–µ–º–∞—Ç–∏–∫–∞ –±–ª–æ–≥–∞: {user_data['blog_topic_name']}\n"
        f"üìå –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {user_data['content_type_name']}\n"
        f"üìå –¢–µ–º–∞: {user_data['themes']}\n"
        f"üìå –¢–æ–Ω: {user_data['tone_name']}\n"
        f"üìå –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {structure_text}\n"
        f"üìå –î–ª–∏–Ω–∞: {user_data['length_name']}\n"
        f"üìå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤: {user_data['post_count']}\n"
        f"üìå –ü—Ä–µ–º–æ–¥–µ—Ä–∞—Ü–∏—è: {'‚úÖ –í–∫–ª—é—á–µ–Ω–∞' if mod_enabled else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'}\n\n"
        f"–ü—Ä–∏–º–µ—Ä –ø–æ—Å—Ç–∞:\n{user_data['example_text'][:200]}..."
    )
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="template_confirm")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="template_cancel")]
    ])
    
    await call.message.edit_text(
        f"{summary}\n\n"
        f"–ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å —ç—Ç–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏?",
        reply_markup=markup
    )
    
    await state.set_state(AutoGenStates.confirmation)


@router.callback_query(AutoGenStates.confirmation)
async def process_final_confirmation(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è BASIC —Ä–µ–∂–∏–º–∞"""
    if call.data == "template_confirm":
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_data = await state.get_data()
        
        await call.message.edit_text(
            "‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!\n\n"
            "‚è≥ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ—Å—Ç–æ–≤. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.\n"
            "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø–æ—Å—Ç—ã –±—É–¥—É—Ç –≥–æ—Ç–æ–≤—ã."
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(
            generate_posts_with_basic_prompt(
                chat_id=user_data.get("chat_id"),
                user_id=call

@router.callback_query(AutoGenStates.confirmation)
async def process_final_confirmation(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è BASIC —Ä–µ–∂–∏–º–∞"""
    if call.data == "template_confirm":
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_data = await state.get_data()
        
        await call.message.edit_text(
            "‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!\n\n"
            "‚è≥ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ—Å—Ç–æ–≤. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.\n"
            "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø–æ—Å—Ç—ã –±—É–¥—É—Ç –≥–æ—Ç–æ–≤—ã."
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(
            generate_posts_with_basic_prompt(
                chat_id=user_data.get("chat_id"),
                user_id=call.from_user.id,
                params=user_data,
                post_count=user_data["post_count"],
                moderation_enabled=user_data["moderation_enabled"],
                bot=call.bot
            )
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
    
    else:  # template_cancel
        await call.message.edit_text(
            "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
        )
        await state.clear()


# ------------------ PRO MODE HANDLERS ------------------

@router.message(AutoGenStates.pro_prompt)
async def process_pro_prompt(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–ø—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ PRO"""
    prompt_text = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–º–ø—Ç–∞
    if not validate_pro_prompt(prompt_text):
        await message.answer(
            "‚ùå –í–∞—à –ø—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞.\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {MAX_PROMPT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–æ–º–ø—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç
    await state.update_data(pro_prompt=prompt_text)
    
    # –ó–∞–ø—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç–æ–≤
    await message.answer(
        "‚úÖ –ü—Ä–æ–º–ø—Ç –ø—Ä–∏–Ω—è—Ç!\n\n"
        "–°–∫–æ–ª—å–∫–æ –ø–æ—Å—Ç–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å? (–æ—Ç 1 –¥–æ 30):"
    )
    
    await state.set_state(AutoGenStates.pro_post_count)


@router.message(AutoGenStates.pro_post_count)
async def process_pro_post_count(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç–æ–≤ –¥–ª—è PRO —Ä–µ–∂–∏–º–∞"""
    try:
        count = int(message.text.strip())
        if count < 1:
            count = 1
        elif count > 30:
            count = 30
    except ValueError:
        count = 1  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    await state.update_data(post_count=count)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä –ø–æ—Å—Ç–∞
    user_data = await state.get_data()
    pro_prompt = user_data.get("pro_prompt", "")
    
    await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä –ø–æ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ–º–ø—Ç–∞...")
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä
        example_text = await generate_article(pro_prompt)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–º–µ—Ä
        await state.update_data(example_text=example_text)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ", callback_data="pro_preview_ok")],
            [InlineKeyboardButton(text="üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π", callback_data="pro_preview_regen")],
            [InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç", callback_data="pro_preview_edit")]
        ])
        
        await message.answer(
            f"üìù –ü—Ä–∏–º–µ—Ä –ø–æ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ–º–ø—Ç–∞:\n\n"
            f"{example_text}\n\n"
            f"–í–∞—Å —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —ç—Ç–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç?",
            reply_markup=markup
        )
        
        await state.set_state(AutoGenStates.pro_preview)
        
    except Exception as e:
        logger.error(f"Error generating preview: {e}")
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä –ø–æ—Å—Ç–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–ø—Ç –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        await state.set_state(AutoGenStates.pro_prompt)


@router.callback_query(AutoGenStates.pro_preview)
async def process_pro_preview_action(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º –≤ PRO —Ä–µ–∂–∏–º–µ"""
    action = call.data.split("_")[2]
    
    if action == "ok":
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ–º–æ–¥–µ—Ä–∞—Ü–∏–∏
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="pro_mod_yes")],
            [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="pro_mod_no")]
        ])
        
        await call.message.edit_text(
            "–í–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–º–æ–¥–µ—Ä–∞—Ü–∏—é –ø–æ—Å—Ç–æ–≤?\n\n"
            "–ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –ø—Ä–µ–º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∫–∞–∂–¥—ã–π –ø–æ—Å—Ç –±—É–¥–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –≤–∞—à–µ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π.",
            reply_markup=markup
        )
        
        await state.set_state(AutoGenStates.pro_moderation)
        
    elif action == "regen":
        # –†–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä
        user_data = await state.get_data()
        pro_prompt = user_data.get("pro_prompt", "")
        
        await call.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –ø–æ—Å—Ç–∞...")
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä
            new_example = await generate_article(pro_prompt)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä
            await state.update_data(example_text=new_example)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ", callback_data="pro_preview_ok")],
                [InlineKeyboardButton(text="üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π", callback_data="pro_preview_regen")],
                [InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç", callback_data="pro_preview_edit")]
            ])
            
            await call.message.edit_text(
                f"üìù –ù–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –ø–æ—Å—Ç–∞:\n\n"
                f"{new_example}\n\n"
                f"–í–∞—Å —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —ç—Ç–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç?",
                reply_markup=markup
            )
            
        except Exception as e:
            logger.error(f"Error regenerating preview: {e}")
            await call.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –ø–æ—Å—Ç–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–ø—Ç –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç", callback_data="pro_preview_edit")]
                ])
            )
            
    elif action == "edit":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –ø—Ä–æ–º–ø—Ç–∞
        user_data = await state.get_data()
        old_prompt = user_data.get("pro_prompt", "")
        
        await call.message.edit_text(
            "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ–º–ø—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞:\n\n"
            f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç:\n{old_prompt}"
        )
        
        await state.set_state(AutoGenStates.pro_prompt)


@router.callback_query(AutoGenStates.pro_moderation)
async def process_pro_moderation_choice(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–º–æ–¥–µ—Ä–∞—Ü–∏–∏ –≤ PRO —Ä–µ–∂–∏–º–µ"""
    mod_enabled = call.data == "pro_mod_yes"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø—Ä–µ–º–æ–¥–µ—Ä–∞—Ü–∏–∏
    await state.update_data(moderation_enabled=mod_enabled)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    user_data = await state.get_data()
    
    summary = (
        f"üìã –°–≤–æ–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫:\n\n"
        f"üìå –†–µ–∂–∏–º: PRO (—Å–≤–æ–π –ø—Ä–æ–º–ø—Ç)\n"
        f"üìå –ü—Ä–æ–º–ø—Ç: {user_data.get('pro_prompt', '')[:100]}...\n"
        f"üìå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤: {user_data.get('post_count', 1)}\n"
        f"üìå –ü—Ä–µ–º–æ–¥–µ—Ä–∞—Ü–∏—è: {'‚úÖ –í–∫–ª—é—á–µ–Ω–∞' if mod_enabled else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'}\n\n"
        f"–ü—Ä–∏–º–µ—Ä –ø–æ—Å—Ç–∞:\n{user_data.get('example_text', '')[:200]}..."
    )
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="pro_confirm")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="pro_cancel")]
    ])
    
    await call.message.edit_text(
        f"{summary}\n\n"
        f"–ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å —ç—Ç–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏?",
        reply_markup=markup
    )
    
    await state.set_state(AutoGenStates.pro_confirmation)


@router.callback_query(AutoGenStates.pro_confirmation)
async def process_pro_final_confirmation(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è PRO —Ä–µ–∂–∏–º–∞"""
    if call.data == "pro_confirm":
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_data = await state.get_data()
        
        await call.message.edit_text(
            "‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!\n\n"
            "‚è≥ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ—Å—Ç–æ–≤. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.\n"
            "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø–æ—Å—Ç—ã –±—É–¥—É—Ç –≥–æ—Ç–æ–≤—ã."
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(
            generate_posts_with_pro_prompt(
                chat_id=user_data.get("chat_id"),
                user_id=call.from_user.id,
                prompt=user_data.get("pro_prompt", ""),
                post_count=user_data.get("post_count", 1),
                moderation_enabled=user_data.get("moderation_enabled", True),
                bot=call.bot
            )
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
    
    else:  # pro_cancel
        await call.message.edit_text(
            "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
        )
        await state.clear()


# ------------------ –§–£–ù–ö–¶–ò–ò –ì–ï–ù–ï–†–ê–¶–ò–ò ------------------

async def generate_posts_with_basic_prompt(
    chat_id: int, 
    user_id: int, 
    params: dict,
    post_count: int,
    moderation_enabled: bool,
    bot
):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ—Å—Ç—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ BASIC"""
    post_ids = []
    
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        logger.info(f"Starting post generation for chat {chat_id}, user {user_id}")
        logger.info(f"Parameters: {params}")
        
        async with AsyncSessionLocal() as session:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç—ã
            for i in range(post_count):
                try:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                    base_prompt = build_basic_prompt(params)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —É–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
                    if post_count > 1:
                        prompt = f"{base_prompt} (–≠—Ç–æ –ø–æ—Å—Ç {i+1} –∏–∑ {post_count}, —Å–æ–∑–¥–∞–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç.)"
                    else:
                        prompt = base_prompt
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                    logger.info(f"Generating post {i+1}/{post_count}")
                    generated_text = await generate_article(prompt)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    new_post = Post(
                        chat_id=chat_id,
                        text=generated_text,
                        media_file_id=None,  # –ü–æ–∫–∞ –±–µ–∑ –º–µ–¥–∏–∞
                        publish_at=datetime.now(timezone.utc),  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
                        created_by=user_id,
                        status="pending" if moderation_enabled else "approved",
                        published=False,
                        is_generated=True,
                        generation_params=json.dumps({
                            "mode": "BASIC",
                            "blog_topic": params.get("blog_topic_name"),
                            "content_type": params.get("content_type_name"),
                            "themes": params.get("themes"),
                            "tone": params.get("tone_name"),
                            "structure": {k: v for k, v in params.get("structure", {}).items() if v},
                            "length": params.get("length_name")
                        })
                    )
                    
                    session.add(new_post)
                    await session.flush()  # –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID
                    
                    post_ids.append(new_post.id)
                    logger.info(f"Post {i+1} generated with ID {new_post.id}")
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
                    await asyncio.sleep(2)
                
                except Exception as e:
                    logger.error(f"Error generating post {i+1}: {str(e)}")
            
            await session.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        if post_ids:
            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            completion_message = (
                f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–æ–∑–¥–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(post_ids)}\n\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            if moderation_enabled:
                completion_message += (
                    f"üîç –ü–æ—Å—Ç—ã —Ç—Ä–µ–±—É—é—Ç –≤–∞—à–µ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π.\n"
                    f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª 'üïì –û–∂–∏–¥–∞—é—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏' –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."
                )
            else:
                completion_message += (
                    f"üöÄ –ü–æ—Å—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é.\n"
                    f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª 'üìã –û—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π' –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º."
                )
            
            await bot.send_message(user_id, completion_message)
        else:
            await bot.send_message(
                user_id,
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å –¥—Ä—É–≥–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏."
            )
    
    except Exception as e:
        logger.error(f"Error in generate_posts_with_basic_prompt: {str(e)}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        try:
            await bot.send_message(
                user_id,
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤: {str(e)}\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        except Exception:
            pass


async def generate_posts_with_pro_prompt(
    chat_id: int, 
    user_id: int, 
    prompt: str,
    post_count: int,
    moderation_enabled: bool,
    bot
):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ—Å—Ç—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ PRO —Ä–µ–∂–∏–º–∞"""
    post_ids = []
    
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        logger.info(f"Starting post generation (PRO mode) for chat {chat_id}, user {user_id}")
        logger.info(f"Prompt: {prompt}")
        
        async with AsyncSessionLocal() as session:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç—ã
            for i in range(post_count):
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    current_prompt = prompt
                    
                    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å—Ç–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º —É–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä
                    if post_count > 1:
                        current_prompt = f"{prompt} (–≠—Ç–æ –ø–æ—Å—Ç {i+1} –∏–∑ {post_count}, —Å–æ–∑–¥–∞–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç.)"
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                    logger.info(f"Generating post {i+1}/{post_count} (PRO mode)")
                    generated_text = await generate_article(current_prompt)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    new_post = Post(
                        chat_id=chat_id,
                        text=generated_text,
                        media_file_id=None,  # –ü–æ–∫–∞ –±–µ–∑ –º–µ–¥–∏–∞
                        publish_at=datetime.now(timezone.utc),  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
                        created_by=user_id,
                        status="pending" if moderation_enabled else "approved",
                        published=False,
                        is_generated=True,
                        generation_params=json.dumps({
                            "mode": "PRO",
                            "prompt": prompt
                        })
                    )
                    
                    session.add(new_post)
                    await session.flush()  # –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID
                    
                    post_ids.append(new_post.id)
                    logger.info(f"Post {i+1} (PRO mode) generated with ID {new_post.id}")
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
                    await asyncio.sleep(2)
                
                except Exception as e:
                    logger.error(f"Error generating post {i+1} (PRO mode): {str(e)}")
            
            await session.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        if post_ids:
            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            completion_message = (
                f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–æ–∑–¥–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(post_ids)}\n\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            if moderation_enabled:
                completion_message += (
                    f"üîç –ü–æ—Å—Ç—ã —Ç—Ä–µ–±—É—é—Ç –≤–∞—à–µ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π.\n"
                    f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª 'üïì –û–∂–∏–¥–∞—é—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏' –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."
                )
            else:
                completion_message += (
                    f"üöÄ –ü–æ—Å—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é.\n"
                    f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª 'üìã –û—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π' –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º."
                )
            
            await bot.send_message(user_id, completion_message)
        else:
            await bot.send_message(
                user_id,
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å –¥—Ä—É–≥–∏–º –ø—Ä–æ–º–ø—Ç–æ–º."
            )
    
    except Exception as e:
        logger.error(f"Error in generate_posts_with_pro_prompt: {str(e)}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        try:
            await bot.send_message(
                user_id,
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤: {str(e)}\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        except Exception:
            pass


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def get_content_types_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    kb = []
    for code, name in CONTENT_TYPES.items():
        kb.append([InlineKeyboardButton(text=name, callback_data=f"ct_{code}")])
    
    return InlineKeyboardMarkup(inline_keyboard=kb)

