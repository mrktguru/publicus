from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import json
from datetime import datetime, timezone
import asyncio
import logging
from sqlalchemy import select

from database.db import AsyncSessionLocal
from database.models import GenerationTemplate, Post, Group
from gpt_client import generate_article

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–π
CONTENT_TYPES = {
    "news": "–ù–æ–≤–æ—Å—Ç–Ω–æ–π",
    "edu": "–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π",
    "fun": "–†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π",
    "anl": "–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π",
    "mot": "–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π",
    "dis": "–î–∏—Å–∫—É—Å—Å–∏–æ–Ω–Ω—ã–π"
}

TONES = {
    "formal": "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π/—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π",
    "neutral": "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π",
    "friendly": "–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π/—Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π",
    "emotional": "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π/–≤–æ—Å—Ç–æ—Ä–∂–µ–Ω–Ω—ã–π",
    "humor": "–Æ–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π"
}

STRUCTURE_OPTIONS = {
    "title": "–ó–∞–≥–æ–ª–æ–≤–æ–∫",
    "main": "–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç",
    "quote": "–í—ã–¥–µ–ª–µ–Ω–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞",
    "conclusion": "–ó–∞–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–≤–æ–¥",
    "hashtags": "–•—ç—à—Ç–µ–≥–∏",
    "emoji": "–≠–º–æ–¥–∑–∏"
}

LENGTH_OPTIONS = {
    "short": "–ö–æ—Ä–æ—Ç–∫–∏–π (–¥–æ 300 —Å–∏–º–≤–æ–ª–æ–≤)",
    "medium": "–°—Ä–µ–¥–Ω–∏–π (300-800 —Å–∏–º–≤–æ–ª–æ–≤)",
    "long": "–î–ª–∏–Ω–Ω—ã–π (800-1500 —Å–∏–º–≤–æ–ª–æ–≤)"
}

router = Router()
logger = logging.getLogger(__name__)

class AutoGenStates(StatesGroup):
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    content_type = State()
    themes = State()
    tone = State()
    structure = State()
    length = State()
    post_count = State()
    preview = State()
    moderation = State()
    confirmation = State()


@router.message(lambda m: m.text and m.text.startswith("ü§ñ –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤"))
async def start_auto_gen(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
    user_data = await state.get_data()
    group_id = user_data.get("group_id")
    
    if not group_id:
        await message.answer(
            "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–∞–Ω–∞–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üîô –°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º group_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(group_id=group_id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
    try:
        async with AsyncSessionLocal() as session:
            group = await session.get(Group, group_id)
            if group:
                await state.update_data(chat_id=group.chat_id)
    except Exception as e:
        logger.error(f"Error fetching group: {e}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    kb = []
    for code, name in CONTENT_TYPES.items():
        kb.append([InlineKeyboardButton(text=name, callback_data=f"ct_{code}")])
    
    markup = InlineKeyboardMarkup(inline_keyboard=kb)
    
    await message.answer(
        "–®–∞–≥ 1: –í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:",
        reply_markup=markup
    )
    
    await state.set_state(AutoGenStates.content_type)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
@router.callback_query(AutoGenStates.content_type, F.data.startswith("ct_"))
async def process_content_type(call: CallbackQuery, state: FSMContext):
    content_type_code = call.data.split("_")[1]
    content_type_name = CONTENT_TYPES[content_type_code]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(content_type_code=content_type_code, content_type_name=content_type_name)
    
    await call.message.edit_text(
        f"‚úÖ –í—ã–±—Ä–∞–Ω —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {content_type_name}\n\n"
        f"–®–∞–≥ 2: –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ —Ç–µ–º—ã, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–º–∏:\n\n"
        f"–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–∞–Ω—á–µ—Å—Ç–µ—Ä –Æ–Ω–∞–π—Ç–µ–¥, –ê–ü–õ, —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä—ã"
    )
    
    await state.set_state(AutoGenStates.themes)


@router.message(AutoGenStates.themes)
async def process_themes(message: Message, state: FSMContext):
    themes = message.text.strip()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º—ã
    await state.update_data(themes=themes)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–Ω–∞
    kb = []
    for code, name in TONES.items():
        kb.append([InlineKeyboardButton(text=name, callback_data=f"tone_{code}")])
    
    markup = InlineKeyboardMarkup(inline_keyboard=kb)
    
    await message.answer(
        f"‚úÖ –¢–µ–º—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {themes}\n\n"
        f"–®–∞–≥ 3: –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–Ω –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è:",
        reply_markup=markup
    )
    
    await state.set_state(AutoGenStates.tone)


@router.callback_query(AutoGenStates.tone, F.data.startswith("tone_"))
async def process_tone(call: CallbackQuery, state: FSMContext):
    tone_code = call.data.split("_")[1]
    tone_name = TONES[tone_code]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–Ω
    await state.update_data(tone_code=tone_code, tone_name=tone_name)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä)
    structure_kb = []
    
    for code, name in STRUCTURE_OPTIONS.items():
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–±–∏—Ä–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
        is_selected = (code == "main")
        checkbox = "‚òëÔ∏è" if is_selected else "‚¨ú"
        structure_kb.append([
            InlineKeyboardButton(
                text=f"{checkbox} {name}", 
                callback_data=f"struct_{code}_{1 if is_selected else 0}"
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    structure_kb.append([InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="struct_confirm")])
    
    markup = InlineKeyboardMarkup(inline_keyboard=structure_kb)
    
    await call.message.edit_text(
        f"‚úÖ –í—ã–±—Ä–∞–Ω —Ç–æ–Ω: {tone_name}\n\n"
        f"–®–∞–≥ 4: –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ—Å—Ç–∞ (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
        reply_markup=markup
    )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    await state.update_data(structure={"main": True})
    await state.set_state(AutoGenStates.structure)


@router.callback_query(AutoGenStates.structure, F.data.startswith("struct_"))
async def process_structure_selection(call: CallbackQuery, state: FSMContext):
    data = call.data.split("_")
    
    # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞
    if data[1] == "confirm":
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –¥–ª–∏–Ω—ã
        kb = []
        for code, name in LENGTH_OPTIONS.items():
            kb.append([InlineKeyboardButton(text=name, callback_data=f"len_{code}")])
        
        markup = InlineKeyboardMarkup(inline_keyboard=kb)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        user_data = await state.get_data()
        structure = user_data.get("structure", {})
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        selected_items = [name for code, name in STRUCTURE_OPTIONS.items() if structure.get(code, False)]
        structure_text = ", ".join(selected_items)
        
        await call.message.edit_text(
            f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {structure_text}\n\n"
            f"–®–∞–≥ 5: –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—É—é –¥–ª–∏–Ω—É –ø–æ—Å—Ç–∞:",
            reply_markup=markup
        )
        
        await state.set_state(AutoGenStates.length)
        return
    
    # –ò–Ω–∞—á–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    component = data[1]
    is_selected = int(data[2]) == 1
    
    # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞
    new_state = 0 if is_selected else 1
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_data = await state.get_data()
    structure = user_data.get("structure", {})
    structure[component] = not is_selected
    await state.update_data(structure=structure)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    structure_kb = []
    for code, name in STRUCTURE_OPTIONS.items():
        checkbox = "‚òëÔ∏è" if structure.get(code, False) else "‚¨ú"
        structure_kb.append([
            InlineKeyboardButton(
                text=f"{checkbox} {name}", 
                callback_data=f"struct_{code}_{1 if structure.get(code, False) else 0}"
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    structure_kb.append([InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="struct_confirm")])
    
    markup = InlineKeyboardMarkup(inline_keyboard=structure_kb)
    
    await call.message.edit_reply_markup(reply_markup=markup)


@router.callback_query(AutoGenStates.length, F.data.startswith("len_"))
async def process_length(call: CallbackQuery, state: FSMContext):
    length_code = call.data.split("_")[1]
    length_name = LENGTH_OPTIONS[length_code]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª–∏–Ω—É
    await state.update_data(length_code=length_code, length_name=length_name)
    
    await call.message.edit_text(
        f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –¥–ª–∏–Ω–∞: {length_name}\n\n"
        f"–®–∞–≥ 6: –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–æ—Ç 1 –¥–æ 30):"
    )
    
    await state.set_state(AutoGenStates.post_count)


@router.message(AutoGenStates.post_count)
async def process_post_count(message: Message, state: FSMContext):
    try:
        count = int(message.text.strip())
        if count < 1:
            count = 1
        elif count > 30:
            count = 30
    except ValueError:
        count = 5  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    await state.update_data(post_count=count)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä –ø–æ—Å—Ç–∞
    user_data = await state.get_data()
    
    await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä –ø–æ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ—Ä–∞
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
        content_type = user_data["content_type_name"]
        themes = user_data["themes"]
        tone = user_data["tone_name"]
        structure = user_data["structure"]
        
        structure_text = []
        if structure.get("title", False):
            structure_text.append("–∑–∞–≥–æ–ª–æ–≤–æ–∫")
        if structure.get("main", False):
            structure_text.append("–æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç")
        if structure.get("quote", False):
            structure_text.append("–≤—ã–¥–µ–ª–µ–Ω–Ω—É—é —Ü–∏—Ç–∞—Ç—É")
        if structure.get("conclusion", False):
            structure_text.append("–∑–∞–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–≤–æ–¥")
        if structure.get("hashtags", False):
            structure_text.append("—Ö—ç—à—Ç–µ–≥–∏")
        
        length_text = user_data["length_name"].split(" ")[0].lower()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ—Ä–∞
        prompt = (
            f"–°–æ–∑–¥–∞–π {content_type} –ø–æ—Å—Ç –Ω–∞ —Ç–µ–º—É '{themes}' –≤ {tone} —Ç–æ–Ω–µ. "
            f"–ü–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å {', '.join(structure_text)}. "
            f"–î–ª–∏–Ω–∞ –ø–æ—Å—Ç–∞: {length_text}. "
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if structure.get("emoji", False):
            prompt += " –î–æ–±–∞–≤—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —É–∫—Ä–∞—à–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞."
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä –ø–æ—Å—Ç–∞
        example_text = await generate_article(prompt)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–º–µ—Ä –ø–æ—Å—Ç–∞
        await state.update_data(example_text=example_text)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ", callback_data="preview_ok")],
            [InlineKeyboardButton(text="üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –ø—Ä–∏–º–µ—Ä", callback_data="preview_regen")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="preview_back")]
        ])
        
        await message.answer(
            f"üìù –ü—Ä–∏–º–µ—Ä –ø–æ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:\n\n"
            f"{example_text}\n\n"
            f"–í–∞—Å —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —ç—Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç?",
            reply_markup=markup
        )
        
        await state.set_state(AutoGenStates.preview)
    
    except Exception as e:
        logger.error(f"Error generating preview: {e}")
        await message.answer(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä –ø–æ—Å—Ç–∞.\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã."
        )
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç–æ–≤
        await state.set_state(AutoGenStates.post_count)


@router.callback_query(AutoGenStates.preview)
async def process_preview_action(call: CallbackQuery, state: FSMContext):
    action = call.data.split("_")[1]
    
    if action == "ok":
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø—Ä–µ–º–æ–¥–µ—Ä–∞—Ü–∏–∏
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="mod_yes")],
            [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="mod_no")]
        ])
        
        await call.message.edit_text(
            "–®–∞–≥ 7: –í–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–º–æ–¥–µ—Ä–∞—Ü–∏—é –ø–æ—Å—Ç–æ–≤?\n\n"
            "–ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –ø—Ä–µ–º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∫–∞–∂–¥—ã–π –ø–æ—Å—Ç –±—É–¥–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –≤–∞—à–µ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π.",
            reply_markup=markup
        )
        
        await state.set_state(AutoGenStates.moderation)
    
    elif action == "regen":
        # –†–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä
        user_data = await state.get_data()
        
        await call.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –ø–æ—Å—Ç–∞...")
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
            content_type = user_data["content_type_name"]
            themes = user_data["themes"]
            tone = user_data["tone_name"]
            structure = user_data["structure"]
            
            structure_text = []
            if structure.get("title", False):
                structure_text.append("–∑–∞–≥–æ–ª–æ–≤–æ–∫")
            if structure.get("main", False):
                structure_text.append("–æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç")
            if structure.get("quote", False):
                structure_text.append("–≤—ã–¥–µ–ª–µ–Ω–Ω—É—é —Ü–∏—Ç–∞—Ç—É")
            if structure.get("conclusion", False):
                structure_text.append("–∑–∞–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–≤–æ–¥")
            if structure.get("hashtags", False):
                structure_text.append("—Ö—ç—à—Ç–µ–≥–∏")
            
            length_text = user_data["length_name"].split(" ")[0].lower()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥—Ä—É–≥–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
            prompt = (
                f"–°–æ–∑–¥–∞–π {content_type} –ø–æ—Å—Ç –Ω–∞ —Ç–µ–º—É '{themes}' –≤ {tone} —Ç–æ–Ω–µ, "
                f"–æ—Ç–ª–∏—á–∞—é—â–∏–π—Å—è –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞. "
                f"–ü–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å {', '.join(structure_text)}. "
                f"–î–ª–∏–Ω–∞ –ø–æ—Å—Ç–∞: {length_text}. "
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if structure.get("emoji", False):
                prompt += " –î–æ–±–∞–≤—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —É–∫—Ä–∞—à–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞."
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –ø–æ—Å—Ç–∞
            new_example_text = await generate_article(prompt)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –ø–æ—Å—Ç–∞
            await state.update_data(example_text=new_example_text)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ", callback_data="preview_ok")],
                [InlineKeyboardButton(text="üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –ø—Ä–∏–º–µ—Ä", callback_data="preview_regen")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="preview_back")]
            ])
            
            await call.message.edit_text(
                f"üìù –ù–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –ø–æ—Å—Ç–∞:\n\n"
                f"{new_example_text}\n\n"
                f"–í–∞—Å —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —ç—Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç?",
                reply_markup=markup
            )
        
        except Exception as e:
            logger.error(f"Error regenerating preview: {e}")
            await call.message.edit_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –ø–æ—Å—Ç–∞.\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ", callback_data="preview_ok")],
                [InlineKeyboardButton(text="üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –ø—Ä–∏–º–µ—Ä", callback_data="preview_regen")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="preview_back")]
            ])
            
            await call.message.edit_reply_markup(reply_markup=markup)
    
    elif action == "back":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await start_auto_gen(call.message, state)


@router.callback_query(AutoGenStates.moderation)
async def process_moderation_choice(call: CallbackQuery, state: FSMContext):
    mod_enabled = call.data == "mod_yes"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø—Ä–µ–º–æ–¥–µ—Ä–∞—Ü–∏–∏
    await state.update_data(moderation_enabled=mod_enabled)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    user_data = await state.get_data()
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
    selected_structure = [name for code, name in STRUCTURE_OPTIONS.items() 
                         if user_data["structure"].get(code, False)]
    structure_text = ", ".join(selected_structure)
    
    summary = (
        f"üìã –°–≤–æ–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n\n"
        f"üìå –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {user_data['content_type_name']}\n"
        f"üìå –¢–µ–º—ã: {user_data['themes']}\n"
        f"üìå –¢–æ–Ω: {user_data['tone_name']}\n"
        f"üìå –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {structure_text}\n"
        f"üìå –î–ª–∏–Ω–∞: {user_data['length_name']}\n"
        f"üìå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤: {user_data['post_count']}\n"
        f"üìå –ü—Ä–µ–º–æ–¥–µ—Ä–∞—Ü–∏—è: {'‚úÖ –í–∫–ª—é—á–µ–Ω–∞' if mod_enabled else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'}\n\n"
        f"–ü—Ä–∏–º–µ—Ä –ø–æ—Å—Ç–∞:\n{user_data['example_text'][:200]}..."
    )
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="template_confirm")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="template_cancel")]
    ])
    
    await call.message.edit_text(
        f"{summary}\n\n"
        f"–ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å —ç—Ç–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏?",
        reply_markup=markup
    )
    
    await state.set_state(AutoGenStates.confirmation)


@router.callback_query(AutoGenStates.confirmation)
async def process_final_confirmation(call: CallbackQuery, state: FSMContext):
    if call.data == "template_confirm":
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_data = await state.get_data()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ JSON —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        structure_json = json.dumps({k: v for k, v in user_data["structure"].items() if v})
        
        await call.message.edit_text(
            "‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!\n\n"
            "‚è≥ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ—Å—Ç–æ–≤. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.\n"
            "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø–æ—Å—Ç—ã –±—É–¥—É—Ç –≥–æ—Ç–æ–≤—ã."
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(
            generate_posts(
                chat_id=user_data.get("chat_id"),
                user_id=call.from_user.id,
                content_type=user_data["content_type_name"],
                themes=user_data["themes"],
                tone=user_data["tone_name"],
                structure=user_data["structure"],
                length=user_data["length_name"],
                post_count=user_data["post_count"],
                moderation_enabled=user_data["moderation_enabled"],
                bot=call.bot
            )
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
    
    else:  # template_cancel
        await call.message.edit_text(
            "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
        )
        await state.clear()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
async def generate_posts(
    chat_id: int, 
    user_id: int, 
    content_type: str,
    themes: str,
    tone: str,
    structure: dict,
    length: str,
    post_count: int,
    moderation_enabled: bool,
    bot
):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    post_ids = []
    
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        logger.info(f"Starting post generation for chat {chat_id}, user {user_id}")
        logger.info(f"Parameters: {content_type}, {themes}, {tone}, {post_count} posts")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
        structure_text = []
        if structure.get("title", False):
            structure_text.append("–∑–∞–≥–æ–ª–æ–≤–æ–∫")
        if structure.get("main", False):
            structure_text.append("–æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç")
        if structure.get("quote", False):
            structure_text.append("–≤—ã–¥–µ–ª–µ–Ω–Ω—É—é —Ü–∏—Ç–∞—Ç—É")
        if structure.get("conclusion", False):
            structure_text.append("–∑–∞–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–≤–æ–¥")
        if structure.get("hashtags", False):
            structure_text.append("—Ö—ç—à—Ç–µ–≥–∏")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏–Ω—É –≤ —Å–∏–º–≤–æ–ª–∞—Ö
        length_map = {
            "short": "–¥–æ 300 —Å–∏–º–≤–æ–ª–æ–≤", 
            "medium": "300-800 —Å–∏–º–≤–æ–ª–æ–≤", 
            "long": "800-1500 —Å–∏–º–≤–æ–ª–æ–≤"
        }
        length_text = length_map.get(length.split(" ")[0].lower(), "300-800 —Å–∏–º–≤–æ–ª–æ–≤")
        
        async with AsyncSessionLocal() as session:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç—ã
            for i in range(post_count):
                try:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞
                    prompt = (
                        f"–°–æ–∑–¥–∞–π {content_type} –ø–æ—Å—Ç –Ω–∞ —Ç–µ–º—É '{themes}' –≤ {tone} —Ç–æ–Ω–µ. "
                        f"–ü–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å {', '.join(structure_text)}. "
                        f"–î–ª–∏–Ω–∞ –ø–æ—Å—Ç–∞: {length_text}. "
                        f"–°–¥–µ–ª–∞–π –∫–æ–Ω—Ç–µ–Ω—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º. "
                        f"–≠—Ç–æ –ø–æ—Å—Ç {i+1} –∏–∑ {post_count}, —Ç–∞–∫ —á—Ç–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ."
                    )
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if structure.get("emoji", False):
                        prompt += " –î–æ–±–∞–≤—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —É–∫—Ä–∞—à–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞."
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                    logger.info(f"Generating post {i+1}/{post_count}")
                    generated_text = await generate_article(prompt)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    new_post = Post(
                        chat_id=chat_id,
                        text=generated_text,
                        media_file_id=None,  # –ü–æ–∫–∞ –±–µ–∑ –º–µ–¥–∏–∞
                        publish_at=datetime.now(timezone.utc),  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
                        created_by=user_id,
                        status="pending" if moderation_enabled else "approved",
                        published=False,
                        is_generated=True,
                        generation_params=json.dumps({
                            "content_type": content_type,
                            "themes": themes,
                            "tone": tone,
                            "structure": structure,
                            "length": length
                        })
                    )
                    
                    session.add(new_post)
                    await session.flush()  # –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID
                    
                    post_ids.append(new_post.id)
                    logger.info(f"Post {i+1} generated with ID {new_post.id}")
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
                    await asyncio.sleep(2)
                
                except Exception as e:
                    logger.error(f"Error generating post {i+1}: {str(e)}")
            
            await session.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        if post_ids:
            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            completion_message = (
                f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–æ–∑–¥–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(post_ids)}\n\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            if moderation_enabled:
                completion_message += (
                    f"üîç –ü–æ—Å—Ç—ã —Ç—Ä–µ–±—É—é—Ç –≤–∞—à–µ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π.\n"
                    f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª 'üïì –û–∂–∏–¥–∞—é—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏' –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."
                )
            else:
                completion_message += (
                    f"üöÄ –ü–æ—Å—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é.\n"
                    f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª 'üìã –û—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π' –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º."
                )
            
            await bot.send_message(user_id, completion_message)
        else:
            await bot.send_message(
                user_id,
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å –¥—Ä—É–≥–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏."
            )
    
    except Exception as e:
        logger.error(f"Error in generate_posts: {str(e)}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        try:
            await bot.send_message(
                user_id,
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤: {str(e)}\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        except:
            pass
