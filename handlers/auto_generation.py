# handlers/auto_generation.py
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import json
from datetime import datetime, timezone, timedelta
import logging
from sqlalchemy import select

from database.db import AsyncSessionLocal
from database.models import Post, Group
from gpt_client import generate_article
from utils.prompt_manager import (
    PRO_MODE, BASIC_MODE, CONTENT_TYPES, TONES, STRUCTURE_OPTIONS, 
    LENGTH_OPTIONS, BLOG_TOPICS, validate_pro_prompt, build_basic_prompt,
    MAX_PROMPT_LENGTH
)

router = Router()
logger = logging.getLogger(__name__)

class AutoGenStates(StatesGroup):
    # –ù–∞—á–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞
    mode_selection = State()
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–∂–∏–º–∞ BASIC
    blog_topic = State()
    content_type = State()
    themes = State()
    tone = State()
    structure = State()
    length = State()
    generated_post = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–∂–∏–º–∞ PRO
    pro_prompt = State()
    pro_generated_post = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è PRO
    
    # –û–±—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Å—Ç–æ–º
    edit_post = State()
    schedule_post = State()
    schedule_time = State()
    schedule_date = State()


@router.message(lambda m: m.text and m.text.startswith("ü§ñ –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤"))
async def start_auto_gen(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
    user_data = await state.get_data()
    group_id = user_data.get("group_id")
    
    if not group_id:
        await message.answer(
            "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–∞–Ω–∞–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üîô –°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º group_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(group_id=group_id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
    try:
        async with AsyncSessionLocal() as session:
            group = await session.get(Group, group_id)
            if group:
                await state.update_data(chat_id=group.chat_id)
    except Exception as e:
        logger.error(f"Error fetching group: {e}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
    kb = [
        [InlineKeyboardButton(text="üîß –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä (BASIC)", callback_data="mode_basic")],
        [InlineKeyboardButton(text="üìù –°–≤–æ–π –ø—Ä–æ–º–ø—Ç (PRO)", callback_data="mode_pro")]
    ]
    
    markup = InlineKeyboardMarkup(inline_keyboard=kb)
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞:\n\n"
        "üîß <b>–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä (BASIC)</b> - –ø–æ—à–∞–≥–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n\n"
        "üìù <b>–°–≤–æ–π –ø—Ä–æ–º–ø—Ç (PRO)</b> - –Ω–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–º–ø—Ç —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ",
        reply_markup=markup,
        parse_mode="HTML"
    )
    
    await state.set_state(AutoGenStates.mode_selection)


@router.callback_query(AutoGenStates.mode_selection)
async def process_mode_selection(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    mode = call.data.split("_")[1]
    
    if mode == "basic":
        # –ù–∞—á–∏–Ω–∞–µ–º —Å –≤—ã–±–æ—Ä–∞ —Ç–µ–º–∞—Ç–∏–∫–∏ –±–ª–æ–≥–∞ –≤ —Ä–µ–∂–∏–º–µ BASIC
        kb = []
        for code, name in BLOG_TOPICS.items():
            kb.append([InlineKeyboardButton(text=name, callback_data=f"blog_{code}")])
        
        markup = InlineKeyboardMarkup(inline_keyboard=kb)
        
        await call.message.edit_text(
            "–í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º <b>–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä (BASIC)</b>\n\n"
            "–®–∞–≥ 1: –í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–µ–º–∞—Ç–∏–∫—É –±–ª–æ–≥–∞:",
            parse_mode="HTML",
            reply_markup=markup
        )
        await state.set_state(AutoGenStates.blog_topic)
        
    elif mode == "pro":
        await call.message.edit_text(
            "–í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º <b>–°–≤–æ–π –ø—Ä–æ–º–ø—Ç (PRO)</b>\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤:\n"
            "- \"–ù–∞–ø–∏—à–∏ —Å—Ç–∞—Ç—å—é –æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞—Ö —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ —ç–∫–æ–ª–æ–≥–∏—é\"\n"
            "- \"–°–æ–∑–¥–∞–π –ø–æ—Å—Ç —Å —Ç—Ä–µ–º—è –º–∞–ª–æ–∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ —Ñ–∞–∫—Ç–∞–º–∏ –æ –∫–æ—Å–º–æ—Å–µ\"\n"
            "- \"–°—Ä–∞–≤–Ω–∏ iPhone –∏ Android —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞\"\n\n"
            "<i>–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ–º–ø—Ç –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏</i>",
            parse_mode="HTML"
        )
        await state.set_state(AutoGenStates.pro_prompt)
# ------------------ BASIC MODE HANDLERS ------------------

@router.callback_query(AutoGenStates.blog_topic, F.data.startswith("blog_"))
async def process_blog_topic(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º–∞—Ç–∏–∫–∏ –±–ª–æ–≥–∞"""
    blog_topic_code = call.data.split("_")[1]
    blog_topic_name = BLOG_TOPICS[blog_topic_code]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
    await state.update_data(blog_topic_code=blog_topic_code, blog_topic_name=blog_topic_name)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    kb = []
    for code, name in CONTENT_TYPES.items():
        kb.append([InlineKeyboardButton(text=name, callback_data=f"ct_{code}")])
    
    markup = InlineKeyboardMarkup(inline_keyboard=kb)
    
    await call.message.edit_text(
        f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ —Ç–µ–º–∞—Ç–∏–∫–∞: {blog_topic_name}\n\n"
        f"–®–∞–≥ 2: –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:",
        reply_markup=markup
    )
    
    await state.set_state(AutoGenStates.content_type)


@router.callback_query(AutoGenStates.content_type, F.data.startswith("ct_"))
async def process_content_type(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    content_type_code = call.data.split("_")[1]
    content_type_name = CONTENT_TYPES[content_type_code]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(content_type_code=content_type_code, content_type_name=content_type_name)
    
    user_data = await state.get_data()
    blog_topic_name = user_data.get("blog_topic_name", "")
    
    await call.message.edit_text(
        f"‚úÖ –í—ã–±—Ä–∞–Ω —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {content_type_name}\n\n"
        f"–®–∞–≥ 3: –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç–µ–º—É –ø–æ—Å—Ç–∞ –¥–ª—è {blog_topic_name}:\n\n"
        f"–ù–∞–ø—Ä–∏–º–µ—Ä: –ù–æ–≤–µ–π—à–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞"
    )
    
    await state.set_state(AutoGenStates.themes)


@router.message(AutoGenStates.themes)
async def process_themes(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–º—ã –ø–æ—Å—Ç–∞"""
    themes = message.text.strip()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º—ã
    await state.update_data(themes=themes)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–Ω–∞
    kb = []
    for code, name in TONES.items():
        kb.append([InlineKeyboardButton(text=name, callback_data=f"tone_{code}")])
    
    markup = InlineKeyboardMarkup(inline_keyboard=kb)
    
    await message.answer(
        f"‚úÖ –¢–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {themes}\n\n"
        f"–®–∞–≥ 4: –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–Ω –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è:",
        reply_markup=markup
    )
    
    await state.set_state(AutoGenStates.tone)


@router.callback_query(AutoGenStates.tone, F.data.startswith("tone_"))
async def process_tone(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–æ–Ω–∞ –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è"""
    tone_code = call.data.split("_")[1]
    tone_name = TONES[tone_code]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–Ω
    await state.update_data(tone_code=tone_code, tone_name=tone_name)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä)
    structure_kb = []
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É (–µ—Å–ª–∏ —É–∂–µ –≤—ã–±–∏—Ä–∞–ª–∏)
    user_data = await state.get_data()
    structure = user_data.get("structure", {"main": True})
    
    for code, name in STRUCTURE_OPTIONS.items():
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–±–∏—Ä–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
        is_selected = structure.get(code, code == "main")
        checkbox = "‚òëÔ∏è" if is_selected else "‚¨ú"
        structure_kb.append([
            InlineKeyboardButton(
                text=f"{checkbox} {name}", 
                callback_data=f"struct_{code}_{1 if is_selected else 0}"
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    structure_kb.append([InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="struct_confirm")])
    
    markup = InlineKeyboardMarkup(inline_keyboard=structure_kb)
    
    await call.message.edit_text(
        f"‚úÖ –í—ã–±—Ä–∞–Ω —Ç–æ–Ω: {tone_name}\n\n"
        f"–®–∞–≥ 5: –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ—Å—Ç–∞ (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
        reply_markup=markup
    )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –µ—Å–ª–∏ –µ–µ –µ—â–µ –Ω–µ—Ç
    if "structure" not in user_data:
        await state.update_data(structure={"main": True})
    
    await state.set_state(AutoGenStates.structure)


@router.callback_query(AutoGenStates.structure, F.data.startswith("struct_"))
async def process_structure_selection(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
    data = call.data.split("_")
    
    # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞
    if data[1] == "confirm":
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –¥–ª–∏–Ω—ã
        kb = []
        for code, name in LENGTH_OPTIONS.items():
            kb.append([InlineKeyboardButton(text=name, callback_data=f"len_{code}")])
        
        markup = InlineKeyboardMarkup(inline_keyboard=kb)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        user_data = await state.get_data()
        structure = user_data.get("structure", {})
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        selected_items = [name for code, name in STRUCTURE_OPTIONS.items() if structure.get(code, False)]
        structure_text = ", ".join(selected_items)
        
        await call.message.edit_text(
            f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {structure_text}\n\n"
            f"–®–∞–≥ 6: –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—É—é –¥–ª–∏–Ω—É –ø–æ—Å—Ç–∞:",
            reply_markup=markup
        )
        
        await state.set_state(AutoGenStates.length)
        return
    
    # –ò–Ω–∞—á–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    component = data[1]
    is_selected = int(data[2]) == 1
    
    # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞
    new_state = 0 if is_selected else 1
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_data = await state.get_data()
    structure = user_data.get("structure", {})
    structure[component] = not is_selected
    await state.update_data(structure=structure)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    structure_kb = []
    for code, name in STRUCTURE_OPTIONS.items():
        checkbox = "‚òëÔ∏è" if structure.get(code, False) else "‚¨ú"
        structure_kb.append([
            InlineKeyboardButton(
                text=f"{checkbox} {name}", 
                callback_data=f"struct_{code}_{1 if structure.get(code, False) else 0}"
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    structure_kb.append([InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="struct_confirm")])
    
    markup = InlineKeyboardMarkup(inline_keyboard=structure_kb)
    
    await call.message.edit_reply_markup(reply_markup=markup)


@router.callback_query(AutoGenStates.length, F.data.startswith("len_"))
async def process_length(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–ª–∏–Ω—ã –ø–æ—Å—Ç–∞"""
    length_code = call.data.split("_")[1]
    length_name = LENGTH_OPTIONS[length_code]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª–∏–Ω—É
    await state.update_data(length_code=length_code, length_name=length_name)
    
    await call.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç
    user_data = await state.get_data()
    
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
        prompt = build_basic_prompt(user_data)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç
        generated_text = await generate_article(prompt)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        await state.update_data(generated_text=generated_text, generation_mode="BASIC")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data="post_publish_now")],
            [InlineKeyboardButton(text="üïí –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é", callback_data="post_schedule")],
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="post_edit")],
            [InlineKeyboardButton(text="üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="post_regenerate")],
            [InlineKeyboardButton(text="üîß –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", callback_data="post_change_params")]
        ])
        
        await call.message.edit_text(
            f"‚úÖ –ü–æ—Å—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!\n\n"
            f"{generated_text}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=markup
        )
        
        await state.set_state(AutoGenStates.generated_post)
        
    except Exception as e:
        logger.error(f"Error generating post: {str(e)}")
        
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="regenerate_basic")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º", callback_data="back_to_params")]
        ])
        
        await call.message.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {str(e)}\n\n"
            f"–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
            reply_markup=markup
        )
# ------------------ PRO MODE HANDLERS ------------------

@router.message(AutoGenStates.pro_prompt)
async def process_pro_prompt(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–ø—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ PRO"""
    prompt_text = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–º–ø—Ç–∞
    if not validate_pro_prompt(prompt_text):
        await message.answer(
            "‚ùå –í–∞—à –ø—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞.\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {MAX_PROMPT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–æ–º–ø—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç
    await state.update_data(pro_prompt=prompt_text)
    
    await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ–º–ø—Ç–∞...")
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä
        generated_text = await generate_article(prompt_text)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        await state.update_data(generated_text=generated_text, generation_mode="PRO")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data="post_publish_now")],
            [InlineKeyboardButton(text="üïí –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é", callback_data="post_schedule")],
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="post_edit")],
            [InlineKeyboardButton(text="üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="post_regenerate")],
            [InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç", callback_data="post_change_prompt")]
        ])
        
        await message.answer(
            f"‚úÖ –ü–æ—Å—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!\n\n"
            f"{generated_text}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=markup
        )
        
        await state.set_state(AutoGenStates.pro_generated_post)
        
    except Exception as e:
        logger.error(f"Error generating post in PRO mode: {str(e)}")
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {str(e)}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–ø—Ç –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        await state.set_state(AutoGenStates.pro_prompt)
# ------------------ –û–ë–©–ò–ï –î–ï–ô–°–¢–í–ò–Ø –° –ü–û–°–¢–û–ú ------------------

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ—Å—Ç–æ–º –≤ —Ä–µ–∂–∏–º–µ BASIC
@router.callback_query(AutoGenStates.generated_post)
async def process_post_action_basic(call: CallbackQuery, state: FSMContext):
    await process_post_action(call, state)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ—Å—Ç–æ–º –≤ —Ä–µ–∂–∏–º–µ PRO
@router.callback_query(AutoGenStates.pro_generated_post)
async def process_post_action_pro(call: CallbackQuery, state: FSMContext):
    await process_post_action(call, state)


async def process_post_action(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ—Å—Ç–æ–º"""
    action = call.data.split("_", 1)[1]
    user_data = await state.get_data()
    generation_mode = user_data.get("generation_mode", "BASIC")
    
    if action == "publish_now":
        # –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å
        await publish_post_now(call, state)
        
    elif action == "schedule":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        today = datetime.now().date()
        tomorrow = today + timedelta(days=1)
        day_after = today + timedelta(days=2)
        
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data=f"date_{today.isoformat()}")],
            [InlineKeyboardButton(text="–ó–∞–≤—Ç—Ä–∞", callback_data=f"date_{tomorrow.isoformat()}")],
            [InlineKeyboardButton(text="–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞", callback_data=f"date_{day_after.isoformat()}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_post")]
        ])
        
        await call.message.edit_text(
            "üìÜ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
            reply_markup=markup
        )
        
        await state.set_state(AutoGenStates.schedule_date)
    elif action == "edit":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
        await call.message.edit_text(
            "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞</b>\n\n"
            "–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:\n"
            f"{user_data.get('generated_text', '')}\n\n"
            "üìù <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.</b>\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram:\n"
            "- *–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç* (–º–µ–∂–¥—É –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏)\n"
            "- _–∫—É—Ä—Å–∏–≤_ (–º–µ–∂–¥—É –Ω–∏–∂–Ω–∏–º–∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è–º–∏)\n"
            "- `–∫–æ–¥` (–º–µ–∂–¥—É –æ–±—Ä–∞—Ç–Ω—ã–º–∏ –∫–∞–≤—ã—á–∫–∞–º–∏)\n"
            "- [—Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏](URL) (—Å—Å—ã–ª–∫–∏)",
            parse_mode="HTML"
        )
        
        await state.set_state(AutoGenStates.edit_post)
        
    elif action == "regenerate":
        # –†–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç
        await call.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ—Å—Ç–∞...")
        
        try:
            if generation_mode == "BASIC":
                # –î–ª—è BASIC –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
                prompt = build_basic_prompt(user_data)
                prompt += " –°–æ–∑–¥–∞–π —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ—Å—Ç–∞."
            else:
                # –î–ª—è PRO –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
                prompt = user_data.get("pro_prompt", "")
                prompt += " –°–æ–∑–¥–∞–π —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç."
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç
            generated_text = await generate_article(prompt)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
            await state.update_data(generated_text=generated_text)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data="post_publish_now")],
                [InlineKeyboardButton(text="üïí –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é", callback_data="post_schedule")],
                [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="post_edit")],
                [InlineKeyboardButton(text="üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="post_regenerate")],
                [InlineKeyboardButton(
                    text="üîß –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã" if generation_mode == "BASIC" else "üìù –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç",
                    callback_data="post_change_params" if generation_mode == "BASIC" else "post_change_prompt"
                )]
            ])
            
            await call.message.edit_text(
                f"‚úÖ –ù–æ–≤—ã–π –ø–æ—Å—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!\n\n"
                f"{generated_text}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=markup
            )
            
        except Exception as e:
            logger.error(f"Error regenerating post: {str(e)}")
            
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="post_regenerate")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ—Å—Ç—É", callback_data="back_to_post")]
            ])
            
            await call.message.edit_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞: {str(e)}\n\n"
                f"–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
                reply_markup=markup
            )
    elif action == "change_params":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ —Ä–µ–∂–∏–º–µ BASIC
        await call.message.edit_text(
            "üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤..."
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–µ—Ä–≤–æ–º—É —à–∞–≥—É BASIC
        kb = []
        for code, name in BLOG_TOPICS.items():
            kb.append([InlineKeyboardButton(text=name, callback_data=f"blog_{code}")])
        
        markup = InlineKeyboardMarkup(inline_keyboard=kb)
        
        await call.message.edit_text(
            "–í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º <b>–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä (BASIC)</b>\n\n"
            "–®–∞–≥ 1: –í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–µ–º–∞—Ç–∏–∫—É –±–ª–æ–≥–∞:",
            parse_mode="HTML",
            reply_markup=markup
        )
        await state.set_state(AutoGenStates.blog_topic)
    
    elif action == "change_prompt":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É –ø—Ä–æ–º–ø—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ PRO
        old_prompt = user_data.get("pro_prompt", "")
        
        await call.message.edit_text(
            "–í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º <b>–°–≤–æ–π –ø—Ä–æ–º–ø—Ç (PRO)</b>\n\n"
            "–ò–∑–º–µ–Ω–∏—Ç–µ –ø—Ä–æ–º–ø—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞:\n\n"
            f"<b>–¢–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç:</b>\n{old_prompt}\n\n"
            "<i>–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏</i>",
            parse_mode="HTML"
        )
        await state.set_state(AutoGenStates.pro_prompt)


@router.message(AutoGenStates.edit_post)
async def process_edited_post(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
    edited_text = message.text.strip()
    
    if not edited_text:
        await message.answer(
            "‚ùå –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç:"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    await state.update_data(generated_text=edited_text)
    user_data = await state.get_data()
    generation_mode = user_data.get("generation_mode", "BASIC")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data="post_publish_now")],
        [InlineKeyboardButton(text="üïí –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é", callback_data="post_schedule")],
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ", callback_data="post_edit")],
        [InlineKeyboardButton(text="üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="post_regenerate")],
        [InlineKeyboardButton(
            text="üîß –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã" if generation_mode == "BASIC" else "üìù –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç",
            callback_data="post_change_params" if generation_mode == "BASIC" else "post_change_prompt"
        )]
    ])
    
    await message.answer(
        f"‚úÖ –ü–æ—Å—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω!\n\n"
        f"{edited_text}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=markup,
        parse_mode="HTML"  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
    )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    if generation_mode == "BASIC":
        await state.set_state(AutoGenStates.generated_post)
    else:
        await state.set_state(AutoGenStates.pro_generated_post)
@router.callback_query(AutoGenStates.schedule_date)
async def process_schedule_date(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    if call.data == "back_to_post":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–æ—Å—Ç—É
        user_data = await state.get_data()
        generation_mode = user_data.get("generation_mode", "BASIC")
        generated_text = user_data.get("generated_text", "")
        
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data="post_publish_now")],
            [InlineKeyboardButton(text="üïí –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é", callback_data="post_schedule")],
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="post_edit")],
            [InlineKeyboardButton(text="üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="post_regenerate")],
            [InlineKeyboardButton(
                text="üîß –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã" if generation_mode == "BASIC" else "üìù –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç",
                callback_data="post_change_params" if generation_mode == "BASIC" else "post_change_prompt"
            )]
        ])
        
        await call.message.edit_text(
            f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç:\n\n"
            f"{generated_text}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=markup
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        if generation_mode == "BASIC":
            await state.set_state(AutoGenStates.generated_post)
        else:
            await state.set_state(AutoGenStates.pro_generated_post)
        
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –¥–∞—Ç—ã
    date_str = call.data.split("_")[1]
    selected_date = datetime.fromisoformat(date_str).date()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
    await state.update_data(selected_date=date_str)
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è
    current_hour = datetime.now().hour
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å —à–∞–≥–æ–º –≤ 1 —á–∞—Å
    time_kb = []
    for hour in range(current_hour, current_hour + 12):
        actual_hour = hour % 24
        time_kb.append([
            InlineKeyboardButton(
                text=f"{actual_hour:02d}:00", 
                callback_data=f"time_{actual_hour:02d}00"
            ),
            InlineKeyboardButton(
                text=f"{actual_hour:02d}:30", 
                callback_data=f"time_{actual_hour:02d}30"
            )
        ])
    
    time_kb.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã", callback_data="back_to_date")])
    
    markup = InlineKeyboardMarkup(inline_keyboard=time_kb)
    
    await call.message.edit_text(
        f"üìÜ –í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {selected_date.strftime('%d.%m.%Y')}\n\n"
        f"‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
        reply_markup=markup
    )
    
    await state.set_state(AutoGenStates.schedule_time)


@router.callback_query(AutoGenStates.schedule_time)
async def process_schedule_time(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    if call.data == "back_to_date":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã
        today = datetime.now().date()
        tomorrow = today + timedelta(days=1)
        day_after = today + timedelta(days=2)
        
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data=f"date_{today.isoformat()}")],
            [InlineKeyboardButton(text="–ó–∞–≤—Ç—Ä–∞", callback_data=f"date_{tomorrow.isoformat()}")],
            [InlineKeyboardButton(text="–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞", callback_data=f"date_{day_after.isoformat()}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_post")]
        ])
        
        await call.message.edit_text(
            "üìÜ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
            reply_markup=markup
        )
        
        await state.set_state(AutoGenStates.schedule_date)
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
    time_str = call.data.split("_")[1]
    hour = int(time_str[:2])
    minute = int(time_str[2:])
    
    user_data = await state.get_data()
    date_str = user_data.get("selected_date")
    selected_date = datetime.fromisoformat(date_str).date()
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    publish_datetime = datetime.combine(
        selected_date, 
        datetime.min.time().replace(hour=hour, minute=minute)
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç –≤ –ë–î —Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π
    generated_text = user_data.get("generated_text", "")
    chat_id = user_data.get("chat_id")
    user_id = call.from_user.id
    generation_mode = user_data.get("generation_mode", "BASIC")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    if generation_mode == "BASIC":
        generation_params = {
            "mode": "BASIC",
            "blog_topic": user_data.get("blog_topic_name"),
            "content_type": user_data.get("content_type_name"),
            "themes": user_data.get("themes"),
            "tone": user_data.get("tone_name"),
            "structure": {k: v for k, v in user_data.get("structure", {}).items() if v},
            "length": user_data.get("length_name")
        }
    else:
        generation_params = {
            "mode": "PRO",
            "prompt": user_data.get("pro_prompt", "")
        }
    
    try:
        async with AsyncSessionLocal() as session:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –ë–î
            post = Post(
                chat_id=chat_id,
                text=generated_text,
                publish_at=publish_datetime,
                created_by=user_id,
                status="approved",
                published=False,
                is_generated=True,
                generation_params=json.dumps(generation_params)
            )
            
            session.add(post)
            await session.commit()
            
            # –û–ø–æ–≤–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
            await call.message.edit_text(
                f"‚úÖ –ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {publish_datetime.strftime('%d.%m.%Y %H:%M')}!\n\n"
                f"{generated_text[:200]}...\n\n"
                f"–ü–æ—Å—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.\n"
                f"–í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ—Å—Ç–∞–º–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ 'üìã –û—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π'"
            )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
            
    except Exception as e:
        logger.error(f"Error scheduling post: {e}")
        
        await call.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )


async def publish_post_now(call: CallbackQuery, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞"""
    user_data = await state.get_data()
    generated_text = user_data.get("generated_text", "")
    chat_id = user_data.get("chat_id")
    generation_mode = user_data.get("generation_mode", "BASIC")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    if generation_mode == "BASIC":
        generation_params = {
            "mode": "BASIC",
            "blog_topic": user_data.get("blog_topic_name"),
            "content_type": user_data.get("content_type_name"),
            "themes": user_data.get("themes"),
            "tone": user_data.get("tone_name"),
            "structure": {k: v for k, v in user_data.get("structure", {}).items() if v},
            "length": user_data.get("length_name")
        }
    else:
        generation_params = {
            "mode": "PRO",
            "prompt": user_data.get("pro_prompt", "")
        }
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
        await call.bot.send_message(
            chat_id=chat_id,
            text=generated_text,
            parse_mode="HTML"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç –≤ –ë–î –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π
        async with AsyncSessionLocal() as session:
            post = Post(
                chat_id=chat_id,
                text=generated_text,
                publish_at=datetime.now(timezone.utc),
                created_by=call.from_user.id,
                status="approved",
                published=True,
                is_generated=True,
                generation_params=json.dumps(generation_params)
            )
            
            session.add(post)
            await session.commit()
            
        # –û–ø–æ–≤–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        await call.message.edit_text(
            "‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!\n\n"
            f"{generated_text[:200]}...\n\n"
            "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π '‚ú® –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error publishing post: {str(e)}")
        
        await call.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {str(e)}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
@router.callback_query(lambda c: c.data == "regenerate_basic")
async def regenerate_basic_post(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ BASIC"""
    user_data = await state.get_data()
    
    await call.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...")
    
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
        prompt = build_basic_prompt(user_data)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç
        generated_text = await generate_article(prompt)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        await state.update_data(generated_text=generated_text, generation_mode="BASIC")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data="post_publish_now")],
            [InlineKeyboardButton(text="üïí –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é", callback_data="post_schedule")],
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="post_edit")],
            [InlineKeyboardButton(text="üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="post_regenerate")],
            [InlineKeyboardButton(text="üîß –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", callback_data="post_change_params")]
        ])
        
        await call.message.edit_text(
            f"‚úÖ –ü–æ—Å—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!\n\n"
            f"{generated_text}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=markup
        )
        
        await state.set_state(AutoGenStates.generated_post)
        
    except Exception as e:
        logger.error(f"Error regenerating post: {str(e)}")
        
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="regenerate_basic")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º", callback_data="back_to_params")]
        ])
        
        await call.message.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {str(e)}\n\n"
            f"–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
            reply_markup=markup
        )


@router.callback_query(lambda c: c.data == "back_to_params")
async def back_to_basic_params(call: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ —Ä–µ–∂–∏–º–µ BASIC"""
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–µ—Ä–≤–æ–º—É —à–∞–≥—É BASIC
    kb = []
    for code, name in BLOG_TOPICS.items():
        kb.append([InlineKeyboardButton(text=name, callback_data=f"blog_{code}")])
    
    markup = InlineKeyboardMarkup(inline_keyboard=kb)
    
    await call.message.edit_text(
        "–í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º <b>–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä (BASIC)</b>\n\n"
        "–®–∞–≥ 1: –í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–µ–º–∞—Ç–∏–∫—É –±–ª–æ–≥–∞:",
        parse_mode="HTML",
        reply_markup=markup
    )
    await state.set_state(AutoGenStates.blog_topic)


@router.callback_query(lambda c: c.data == "back_to_post")
async def back_to_post_view(call: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –ø–æ—Å—Ç–∞"""
    user_data = await state.get_data()
    generation_mode = user_data.get("generation_mode", "BASIC")
    generated_text = user_data.get("generated_text", "")
    
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data="post_publish_now")],
        [InlineKeyboardButton(text="üïí –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é", callback_data="post_schedule")],
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="post_edit")],
        [InlineKeyboardButton(text="üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="post_regenerate")],
        [InlineKeyboardButton(
            text="üîß –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã" if generation_mode == "BASIC" else "üìù –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç",
            callback_data="post_change_params" if generation_mode == "BASIC" else "post_change_prompt"
        )]
    ])
    
    await call.message.edit_text(
        f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç:\n\n"
        f"{generated_text}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=markup
    )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    if generation_mode == "BASIC":
        await state.set_state(AutoGenStates.generated_post)
    else:
        await state.set_state(AutoGenStates.pro_generated_post)
