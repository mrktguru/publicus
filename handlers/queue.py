# handlers/queue.py
from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from sqlalchemy import select, and_
from datetime import datetime

from database.db import AsyncSessionLocal
from database.models import Post, Group
from keyboards.main import main_menu_kb

router = Router()


@router.message(F.text == "üìã –û—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π")
async def show_queue(message: Message, state: FSMContext):
    data = await state.get_data()
    group_id = data.get("group_id")
    if not group_id:
        return await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ /start")

    async with AsyncSessionLocal() as s:
        group = await s.get(Group, group_id)
        if not group:
            return await message.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        q = (
            select(Post)
            .where(
                and_(
                    Post.chat_id == group.chat_id,
                    Post.status == "approved",
                    Post.published.is_(False),
                )
            )
            .order_by(Post.publish_at)
        )
        posts = (await s.execute(q)).scalars().all()

    if not posts:
        return await message.answer("üì¶ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.", reply_markup=main_menu_kb())

    lines = [
        f"üïí {p.publish_at:%d.%m %H:%M} ‚Äî { (p.text or '')[:40]}‚Ä¶" for p in posts
    ]
    await message.answer(
        "<b>üìã –û—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π:</b>\n\n" + "\n".join(lines),
        parse_mode="HTML",
        reply_markup=main_menu_kb(),
    )

# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ —Ñ–∞–π–ª handlers/queue.py
@router.callback_query(F.data == "show_schedule")
async def show_schedule_callback(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ '–ö–æ–Ω—Ç–µ–Ω—Ç –ø–ª–∞–Ω'"""
    logger.info(f"Show schedule callback received: {call.data}")
    
    user_id = call.from_user.id
    user_data = await state.get_data()
    current_channel = user_data.get("current_channel_title", "—Ç–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª")
    
    try:
        async with AsyncSessionLocal() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω –ª–∏ –∫–∞–Ω–∞–ª
            if not user_data.get("group_id") or not user_data.get("chat_id"):
                await call.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã", show_alert=True)
                return
            
            chat_id = user_data["chat_id"]
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
            now = datetime.now(ZoneInfo("Europe/Moscow"))
            query = (
                select(Post)
                .filter(
                    Post.chat_id == chat_id,
                    Post.status == "approved",
                    Post.published == False,
                    Post.publish_at > now
                )
                .order_by(Post.publish_at)
            )
            
            result = await session.execute(query)
            scheduled_posts = result.scalars().all()
            
            if not scheduled_posts:
                # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
                await call.message.edit_text(
                    f"üìÖ <b>–ö–æ–Ω—Ç–µ–Ω—Ç –ø–ª–∞–Ω –∫–∞–Ω–∞–ª–∞ \"{current_channel}\"</b>\n\n"
                    f"–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π.\n\n"
                    f"–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç'.",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="post:create_manual")],
                        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                    ])
                )
            else:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
                posts_text = "\n\n".join([
                    f"üïí <b>{post.publish_at.strftime('%d.%m.%Y %H:%M')}</b>\n"
                    f"{post.text[:100]}{'...' if len(post.text) > 100 else ''}"
                    for post in scheduled_posts[:10]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 –ø–æ—Å—Ç–æ–≤
                ])
                
                await call.message.edit_text(
                    f"üìÖ <b>–ö–æ–Ω—Ç–µ–Ω—Ç –ø–ª–∞–Ω –∫–∞–Ω–∞–ª–∞ \"{current_channel}\"</b>\n\n"
                    f"{posts_text}\n\n"
                    f"–í—Å–µ–≥–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {len(scheduled_posts)} –ø–æ—Å—Ç–æ–≤.",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="post:create_manual")],
                        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                    ])
                )
                
            await call.answer()
            
    except Exception as e:
        logger.error(f"Error showing schedule: {e}")
        await call.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞", show_alert=True)
