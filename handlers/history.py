from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from sqlalchemy import select, and_

from database.db import AsyncSessionLocal
from database.models import Post, Group
from keyboards.main import main_menu_kb

router = Router()

@router.message(F.text == "üìú –ò—Å—Ç–æ—Ä–∏—è")
async def show_history(message: Message, state: FSMContext):
    data = await state.get_data()
    group_id = data.get("group_id")
    if not group_id:
        return await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ /start")

    async with AsyncSessionLocal() as s:
        group = await s.get(Group, group_id)
        if not group:
            return await message.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        q = (
            select(Post)
            .where(and_(Post.chat_id == group.chat_id, Post.status == "sent"))
            .order_by(Post.publish_at.desc())
            .limit(30)
        )
        posts = (await s.execute(q)).scalars().all()

    if not posts:
        return await message.answer("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.", reply_markup=main_menu_kb())

    lines = [
        f"‚úîÔ∏è {p.publish_at:%d.%m %H:%M} ‚Äî { (p.text or '')[:40]}‚Ä¶" for p in posts
    ]
    await message.answer(
        "<b>üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b>\n\n" + "\n".join(lines),
        parse_mode="HTML",
        reply_markup=main_menu_kb(),
    )
# –û–±–Ω–æ–≤–∏—Ç–µ —Ñ–∞–π–ª handlers/history.py

import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo

from database.db import AsyncSessionLocal
from database.models import Post, Group

router = Router()
logger = logging.getLogger(__name__)

@router.message(lambda m: m.text == "üìú –ò—Å—Ç–æ—Ä–∏—è" or m.text == "–ò—Å—Ç–æ—Ä–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π")
async def history_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∏—Å—Ç–æ—Ä–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–Ω–æ–ø–∫—É"""
    user_data = await state.get_data()
    current_channel = user_data.get("current_channel_title", "—Ç–µ–∫—É—â–µ–º –∫–∞–Ω–∞–ª–µ")
    
    # –ó–¥–µ—Å—å –∫–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
    await show_history(message, state, is_callback=False)

@router.callback_query(F.data == "post_history")
async def history_callback(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ '–ò—Å—Ç–æ—Ä–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π'"""
    logger.info(f"History callback received: {call.data}")
    
    # –ó–¥–µ—Å—å –∫–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π —á–µ—Ä–µ–∑ callback
    await show_history(call, state, is_callback=True)


async def show_history(source, state: FSMContext, is_callback=False):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
    try:
        user_data = await state.get_data()
        current_channel = user_data.get("current_channel_title", "—Ç–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω –ª–∏ –∫–∞–Ω–∞–ª
        if not user_data.get("group_id") or not user_data.get("chat_id"):
            if is_callback:
                await source.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã", show_alert=True)
                return
            else:
                await source.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '–°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É'")
                return
        
        chat_id = user_data["chat_id"]
        
        async with AsyncSessionLocal() as session:
            # –ü–æ–ª—É—á–∞–µ–º –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            now = datetime.now(ZoneInfo("Europe/Moscow"))
            month_ago = now - timedelta(days=30)
            
            query = (
                select(Post)
                .filter(
                    Post.chat_id == chat_id,
                    Post.published == True,
                    Post.publish_at >= month_ago
                )
                .order_by(Post.publish_at.desc())
            )
            
            result = await session.execute(query)
            published_posts = result.scalars().all()
            
            if not published_posts:
                # –ï—Å–ª–∏ –Ω–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
                history_text = f"üìã <b>–ò—Å—Ç–æ—Ä–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∫–∞–Ω–∞–ª–∞ \"{current_channel}\"</b>\n\n" \
                              f"–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π –Ω–µ –±—ã–ª–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ—Å—Ç–∞."
            else:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
                posts_text = "\n\n".join([
                    f"üì§ <b>{post.publish_at.strftime('%d.%m.%Y %H:%M')}</b>\n"
                    f"{post.text[:100]}{'...' if len(post.text) > 100 else ''}"
                    for post in published_posts[:10]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 –ø–æ—Å—Ç–æ–≤
                ])
                
                history_text = f"üìã <b>–ò—Å—Ç–æ—Ä–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∫–∞–Ω–∞–ª–∞ \"{current_channel}\"</b>\n\n" \
                              f"{posts_text}\n\n" \
                              f"–í—Å–µ–≥–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {len(published_posts)} –ø–æ—Å—Ç–æ–≤ –∑–∞ 30 –¥–Ω–µ–π."
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
            if is_callback:
                try:
                    await source.message.edit_text(history_text, parse_mode="HTML", reply_markup=keyboard)
                    await source.answer()
                except Exception as e:
                    logger.error(f"Error editing message: {e}")
                    await source.message.answer(history_text, parse_mode="HTML", reply_markup=keyboard)
                    await source.answer()
            else:
                await source.answer(history_text, parse_mode="HTML", reply_markup=keyboard)
                
    except Exception as e:
        logger.error(f"Error showing history: {e}")
        error_message = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π."
        
        if is_callback:
            await source.answer(error_message, show_alert=True)
        else:
            await source.answer(error_message)
