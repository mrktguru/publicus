from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, Chat
from aiogram.fsm.context import FSMContext
from sqlalchemy import select, delete
from database.db import AsyncSessionLocal
from database.models import Group
from keyboards.main import main_menu_kb
import logging

router = Router()
logger = logging.getLogger(__name__)


@router.callback_query(F.data == "open_group_settings")
async def open_group_settings(call: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥—Ä—É–ø–ø."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with AsyncSessionLocal() as session:
            query = select(Group).where(Group.added_by == call.from_user.id)
            result = await session.execute(query)
            groups = result.scalars().all()
        
        if not groups:
            await call.message.edit_text(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø. "
                "–ü–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ."
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
        groups_text = "–í–∞—à–∏ –≥—Ä—É–ø–ø—ã:\n\n"
        for i, group in enumerate(groups, 1):
            groups_text += f"{i}. {group.title} [ID: {group.chat_id}]\n"
        
        groups_text += "\n‚Ä¢ –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ—ë"
        groups_text += "\n‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –≥—Ä—É–ø–ø—ã, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ—ë (–Ω–∞–ø—Ä–∏–º–µ—Ä, '—É–¥–∞–ª–∏—Ç—å -1001234567890')"
        
        await call.message.edit_text(groups_text)
    
    except Exception as e:
        logger.error(f"Error in open_group_settings: {e}")
        await call.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )


@router.message(F.forward_from_chat.as_("forwarded_chat"))
async def add_group_by_forward(message: Message, forwarded_chat: Chat, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã."""
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –≤ –ë–î
        async with AsyncSessionLocal() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –≥—Ä—É–ø–ø–∞
            query = select(Group).where(Group.chat_id == forwarded_chat.id)
            result = await session.execute(query)
            existing_group = result.scalars().first()
            
            if existing_group:
                group_id = existing_group.id
                await message.answer(f"‚úÖ –ì—Ä—É–ø–ø–∞ ¬´{forwarded_chat.title}¬ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É
                new_group = Group(
                    chat_id=forwarded_chat.id,
                    title=forwarded_chat.title,
                    added_by=message.from_user.id
                )
                session.add(new_group)
                await session.flush()  # –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID
                group_id = new_group.id
                await session.commit()
                await message.answer(f"‚úÖ –ì—Ä—É–ø–ø–∞ ¬´{forwarded_chat.title}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
            
            # –í–∞–∂–Ω–æ: —Å—Ä–∞–∑—É –∂–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç—Ç—É –≥—Ä—É–ø–ø—É –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—É—é
            await state.set_data({"group_id": group_id, "chat_id": forwarded_chat.id})
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –Ω–∞–∂–∏–º–∞—Ç—å /start
            await message.answer(
                f"üëç –ì—Ä—É–ø–ø–∞ ¬´{forwarded_chat.title}¬ª –≤—ã–±—Ä–∞–Ω–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=main_menu_kb()
            )
    
    except Exception as e:
        logger.error(f"Error in add_group_by_forward: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã. "
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø–µ—Ä–µ—Å–ª–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã –∏–ª–∏ –∫–∞–Ω–∞–ª–∞, "
            "–∏ —á—Ç–æ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞."
        )


@router.message(lambda message: message.text and message.text.lower().startswith("—É–¥–∞–ª–∏—Ç—å "))
async def delete_group(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã."""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≥—Ä—É–ø–ø—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            chat_id = int(message.text.split("—É–¥–∞–ª–∏—Ç—å ")[1].strip())
        except (ValueError, IndexError):
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: —É–¥–∞–ª–∏—Ç—å <ID –≥—Ä—É–ø–ø—ã>\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: —É–¥–∞–ª–∏—Ç—å -1001234567890"
            )
            return
        
        # –£–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É –∏–∑ –ë–î
        async with AsyncSessionLocal() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∞—è –≥—Ä—É–ø–ø–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            query = select(Group).where(Group.chat_id == chat_id, Group.added_by == message.from_user.id)
            result = await session.execute(query)
            group = result.scalars().first()
            
            if not group:
                await message.answer(f"‚ùå –ì—Ä—É–ø–ø–∞ —Å ID {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.")
                return
            
            # –£–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É
            await session.execute(delete(Group).where(Group.id == group.id))
            await session.commit()
            
            await message.answer(f"‚úÖ –ì—Ä—É–ø–ø–∞ ¬´{group.title}¬ª —É–¥–∞–ª–µ–Ω–∞!")
    
    except Exception as e:
        logger.error(f"Error in delete_group: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )


@router.message(lambda message: message.text and message.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø")
async def group_settings_button(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥—Ä—É–ø–ø."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with AsyncSessionLocal() as session:
            query = select(Group).where(Group.added_by == message.from_user.id)
            result = await session.execute(query)
            groups = result.scalars().all()
        
        if not groups:
            await message.answer(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø. "
                "–ü–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ."
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
        groups_text = "–í–∞—à–∏ –≥—Ä—É–ø–ø—ã:\n\n"
        for i, group in enumerate(groups, 1):
            groups_text += f"{i}. {group.title} [ID: {group.chat_id}]\n"
        
        groups_text += "\n‚Ä¢ –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ—ë"
        groups_text += "\n‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –≥—Ä—É–ø–ø—ã, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ—ë (–Ω–∞–ø—Ä–∏–º–µ—Ä, '—É–¥–∞–ª–∏—Ç—å -1001234567890')"
        
        await message.answer(groups_text)
    
    except Exception as e:
        logger.error(f"Error in group_settings_button: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
